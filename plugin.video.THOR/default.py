import base64;exec base64.b64decode('# -*- coding: utf-8 -*-
import urllib
import urllib2
import re
import os
import xbmcplugin
import xbmcgui
import xbmcaddon
import xbmcvfs
import traceback
import cookielib , base64
from BeautifulSoup import BeautifulStoneSoup , BeautifulSoup , BeautifulSOAP
OO00OoO = None
try :
 from xml . sax . saxutils import escape
except : traceback . print_exc ( )
try :
 import json
except :
 import simplejson as json
import SimpleDownloader as downloader
import time
if 7 - 7: I1II * IIII . Ii % oOO
try :
 import ssl
 ssl . _create_default_https_context = ssl . _create_unverified_context
except :
 pass
 if 1 - 1: II - iiIIi1i1Iii - I1 - IIoooO0ooO0oo * OOO
Iiii1iI = False
Oo000oO0oo = False
OO00oo0o0O0oo = [ '180upload.com' , 'allmyvideos.net' , 'bestreams.net' , 'clicknupload.com' , 'cloudzilla.to' , 'movshare.net' , 'novamov.com' , 'nowvideo.sx' , 'videoweed.es' , 'daclips.in' , 'datemule.com' , 'fastvideo.in' , 'faststream.in' , 'filehoot.com' , 'filenuke.com' , 'sharesix.com' , 'plus.google.com' , 'picasaweb.google.com' , 'gorillavid.com' , 'gorillavid.in' , 'grifthost.com' , 'hugefiles.net' , 'ipithos.to' , 'ishared.eu' , 'kingfiles.net' , 'mail.ru' , 'my.mail.ru' , 'videoapi.my.mail.ru' , 'mightyupload.com' , 'mooshare.biz' , 'movdivx.com' , 'movpod.net' , 'movpod.in' , 'movreel.com' , 'mrfile.me' , 'nosvideo.com' , 'openload.io' , 'played.to' , 'bitshare.com' , 'filefactory.com' , 'k2s.cc' , 'oboom.com' , 'rapidgator.net' , 'primeshare.tv' , 'bitshare.com' , 'filefactory.com' , 'k2s.cc' , 'oboom.com' , 'rapidgator.net' , 'sharerepo.com' , 'stagevu.com' , 'streamcloud.eu' , 'streamin.to' , 'thefile.me' , 'thevideo.me' , 'tusfiles.net' , 'uploadc.com' , 'zalaa.com' , 'uploadrocket.net' , 'uptobox.com' , 'v-vids.com' , 'veehd.com' , 'vidbull.com' , 'videomega.tv' , 'vidplay.net' , 'vidspot.net' , 'vidto.me' , 'vidzi.tv' , 'vimeo.com' , 'vk.com' , 'vodlocker.com' , 'xfileload.com' , 'xvidstage.com' , 'zettahost.tv' ]
OOo0O = [ 'plugin.video.dramasonline' , 'plugin.video.f4mTester' , 'plugin.video.shahidmbcnet' , 'plugin.video.SportsDevil' , 'plugin.stream.vaughnlive.tv' , 'plugin.video.ZemTV-shani' ]
if 66 - 66: iiIi1IiI + oO0o0 + i11Ii
class ii11iI1i ( urllib2 . HTTPErrorProcessor ) :
 def http_response ( self , request , response ) :
  return response
 https_response = http_response
 if 1 - 1: i11IiI1II + O00O - iiI % IiiIIiII * oO00ooo0o0OO
iI11I1iiI1i = False ;
if iI11I1iiI1i :
 if 29 - 29: iIII1 / O000000O % I1III1iI1iiiIiI1 . oO0o0 - i11IiI1II / IiiIIiII
 if 44 - 44: oOO . Ii - I1 * I1II * iiI / OOO
 try :
  import pysrc . pydevd as pydevd
  if 65 - 65: O000000O - Ii
  pydevd . settrace ( 'localhost' , stdoutToServer = True , stderrToServer = True )
 except ImportError :
  sys . stderr . write ( "Error: " +
 "You must add org.python.pydev.debug.pysrc to your PYTHONPATH." )
  sys . exit ( 1 )
  if 87 - 87: IiiIIiII % iIII1 - iiIIi1i1Iii % iiIi1IiI % i11IiI1II % iIII1
  if 5 - 5: I1II . OOO - i11Ii . i11IiI1II * Ii
Ooo = xbmcaddon . Addon ( 'plugin.video.Catoal' )
iii1II = Ooo . getAddonInfo ( 'version' )
I111i11I1I = xbmc . translatePath ( Ooo . getAddonInfo ( 'profile' ) . decode ( 'utf-8' ) )
i11ii = xbmc . translatePath ( Ooo . getAddonInfo ( 'path' ) . decode ( 'utf-8' ) )
o0O0oO0 = os . path . join ( I111i11I1I , 'favorites' )
IIIi1111iI = os . path . join ( I111i11I1I , 'history' )
iiIIiiiI11 = os . path . join ( I111i11I1I , 'list_revision' )
O00O000 = os . path . join ( i11ii , 'icon.png' )
O0OOO = os . path . join ( i11ii , 'fanart.jpg' )
iIi11iI1ii1I = os . path . join ( i11ii , base64 . b64decode ( 'c291cmNlX2ZpbGU=' ) )
OOoOO = I111i11I1I
if 29 - 29: IIII . i11Ii
oooO0 = os . path . join ( I111i11I1I , 'LivewebTV' )
downloader = downloader . SimpleDownloader ( )
I111I = Ooo . getSetting ( 'debug' )
if os . path . exists ( o0O0oO0 ) == True :
 iI1Ii1 = open ( o0O0oO0 ) . read ( )
else : iI1Ii1 = [ ]
if os . path . exists ( iIi11iI1ii1I ) == True :
 iI1iII1i1iI = open ( iIi11iI1ii1I ) . read ( )
else : iI1iII1i1iI = [ ]
if 76 - 76: oO00ooo0o0OO + oO0o0 + iiIi1IiI * IIoooO0ooO0oo
if 89 - 89: OOO * iiI
def i1IiiII ( string ) :
 if I111I == 'true' :
  xbmc . log ( "[addon.Catoal-%s]: %s" % ( iii1II , string ) )
  if 28 - 28: oO0o0 + O00O + oO0o0 * i11Ii / oOO
  if 13 - 13: iiIIi1i1Iii % iIII1 . I1 % I1
def Ii1Iii1I1i1i ( url , headers = None ) :
 try :
  if headers is None :
   headers = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36' }
   if 15 - 15: Ii % I1III1iI1iiiIiI1 - I1III1iI1iiiIiI1 * iiIIi1i1Iii + iiI . I1III1iI1iiiIiI1
  if '|' in url :
   url , Ii1IIi = url . split ( '|' )
   Ii1IIi = Ii1IIi . split ( '&' )
   if 29 - 29: oO0o0 - II / IIII
   for IIi1I1IIIII in Ii1IIi :
    if len ( IIi1I1IIIII . split ( '=' ) ) == 2 :
     Ooo0o0ooO , ii1iI111iIi1 = IIi1I1IIIII . split ( '=' )
    else :
     O0O = IIi1I1IIIII . split ( '=' )
     Ooo0o0ooO = O0O [ 0 ]
     ii1iI111iIi1 = '=' . join ( O0O [ 1 : ] )
     if 90 - 90: oOO . oOO - IIoooO0ooO0oo + iiI . IIII . iiI
    print Ooo0o0ooO , ii1iI111iIi1
    headers [ Ooo0o0ooO ] = ii1iI111iIi1
    if 74 - 74: OOO * IIoooO0ooO0oo
  i11Iii1iii1IiIi = urllib2 . Request ( url , None , headers )
  ii1I1Iii = urllib2 . urlopen ( i11Iii1iii1IiIi )
  o0OoO0o = ii1I1Iii . read ( )
  ii1I1Iii . close ( )
  return o0OoO0o
 except urllib2 . URLError , i1Ii1II :
  i1IiiII ( 'URL: ' + url )
  if hasattr ( i1Ii1II , 'code' ) :
   i1IiiII ( 'We failed with error code - %s.' % i1Ii1II . code )
   xbmc . executebuiltin ( "XBMC.Notification(Catoal,We failed with error code - " + str ( i1Ii1II . code ) + ",10000," + O00O000 + ")" )
  elif hasattr ( i1Ii1II , 'reason' ) :
   i1IiiII ( 'We failed to reach a server.' )
   i1IiiII ( 'Reason: %s' % i1Ii1II . reason )
   xbmc . executebuiltin ( "XBMC.Notification(Catoal,We failed to reach a server. - " + str ( i1Ii1II . reason ) + ",10000," + O00O000 + ")" )
   if 11 - 11: oO0o0 / i11IiI1II % I1III1iI1iiiIiI1
def i1iIii ( ) :
 try :
  if os . path . exists ( o0O0oO0 ) == True :
   oo0OOO0O ( 'Favorites' , 'url' , 4 , os . path . join ( i11ii , 'resources' , 'favorite.png' ) , O0OOO , '' , '' , '' , '' )
  if Ooo . getSetting ( "browse_xml_database" ) == "true" :
   oo0OOO0O ( 'XML Database' , 'http://xbmcplus.xb.funpic.de/www-data/filesystem/' , 15 , O00O000 , O0OOO , '' , '' , '' , '' )
  if Ooo . getSetting ( "browse_community" ) == "true" :
   oo0OOO0O ( 'Community Files' , 'community_files' , 16 , O00O000 , O0OOO , '' , '' , '' , '' )
  if Ooo . getSetting ( "searchotherplugins" ) == "true" :
   oo0OOO0O ( 'Search Other Plugins' , 'Search Plugins' , 25 , O00O000 , O0OOO , '' , '' , '' , '' )
  if os . path . exists ( iIi11iI1ii1I ) == True :
   ii1i1i1 = json . loads ( open ( iIi11iI1ii1I , "r" ) . read ( ) )
   if 13 - 13: iiI + oO0o0 - O000000O / I1 % O00O / oO0o0
   if len ( ii1i1i1 ) > 1 :
    for OOo0oOOOO0 in ii1i1i1 :
     try :
      if 7 - 7: iIII1 % iiI * iiIi1IiI
      if isinstance ( OOo0oOOOO0 , list ) :
       oo0OOO0O ( OOo0oOOOO0 [ 0 ] . encode ( 'utf-8' ) , OOo0oOOOO0 [ 1 ] . encode ( 'utf-8' ) , 1 , O00O000 , O0OOO , '' , '' , '' , '' , 'source' )
      else :
       oO = O00O000
       ooo0ooOoO0Oo = O0OOO
       IIIi11 = ''
       Iii1 = ''
       IiIIi1I1Ii = ''
       oo0 = ''
       if OOo0oOOOO0 . has_key ( 'thumbnail' ) :
        oO = OOo0oOOOO0 [ 'thumbnail' ]
       if OOo0oOOOO0 . has_key ( 'fanart' ) :
        ooo0ooOoO0Oo = OOo0oOOOO0 [ 'fanart' ]
       if OOo0oOOOO0 . has_key ( 'description' ) :
        IIIi11 = OOo0oOOOO0 [ 'description' ]
       if OOo0oOOOO0 . has_key ( 'date' ) :
        Iii1 = OOo0oOOOO0 [ 'date' ]
       if OOo0oOOOO0 . has_key ( 'genre' ) :
        oo0 = OOo0oOOOO0 [ 'genre' ]
       if OOo0oOOOO0 . has_key ( 'credits' ) :
        IiIIi1I1Ii = OOo0oOOOO0 [ 'credits' ]
       oo0OOO0O ( OOo0oOOOO0 [ 'title' ] . encode ( 'utf-8' ) , OOo0oOOOO0 [ 'url' ] . encode ( 'utf-8' ) , 1 , oO , ooo0ooOoO0Oo , IIIi11 , oo0 , Iii1 , IiIIi1I1Ii , 'source' )
     except : traceback . print_exc ( )
   else :
    if len ( ii1i1i1 ) == 1 :
     if isinstance ( ii1i1i1 [ 0 ] , list ) :
      O0 ( ii1i1i1 [ 0 ] [ 1 ] . encode ( 'utf-8' ) , O0OOO )
     else :
      O0 ( ii1i1i1 [ 0 ] [ 'url' ] , ii1i1i1 [ 0 ] [ 'fanart' ] )
 except : traceback . print_exc ( )
 if 43 - 43: i11IiI1II . iiI % oOO - i11IiI1II + I1II
def iiII1 ( url = None ) :
 if url is None :
  if not Ooo . getSetting ( "new_file_source" ) == "" :
   oO0oOOOOOo0 = Ooo . getSetting ( 'new_file_source' ) . decode ( 'utf-8' )
  elif not Ooo . getSetting ( "new_url_source" ) == "" :
   oO0oOOOOOo0 = Ooo . getSetting ( 'new_url_source' ) . decode ( 'utf-8' )
 else :
  oO0oOOOOOo0 = url
 if oO0oOOOOOo0 == '' or oO0oOOOOOo0 is None :
  return
 i1IiiII ( 'Adding New Source: ' + oO0oOOOOOo0 . encode ( 'utf-8' ) )
 if 10 - 10: IIII
 iii1iIII1111I = None
 if 22 - 22: O00O / O000000O
 o0OoO0o = IIiI11 ( oO0oOOOOOo0 )
 if 16 - 16: oO00ooo0o0OO % I1III1iI1iiiIiI1 * O00O * iiIi1IiI
 if isinstance ( o0OoO0o , BeautifulSOAP ) :
  if o0OoO0o . find ( 'channels_info' ) :
   iii1iIII1111I = o0OoO0o . channels_info
  elif o0OoO0o . find ( 'items_info' ) :
   iii1iIII1111I = o0OoO0o . items_info
 if iii1iIII1111I :
  Ii1 = { }
  Ii1 [ 'url' ] = oO0oOOOOOo0
  try : Ii1 [ 'title' ] = iii1iIII1111I . title . string
  except : pass
  try : Ii1 [ 'thumbnail' ] = iii1iIII1111I . thumbnail . string
  except : pass
  try : Ii1 [ 'fanart' ] = iii1iIII1111I . fanart . string
  except : pass
  try : Ii1 [ 'genre' ] = iii1iIII1111I . genre . string
  except : pass
  try : Ii1 [ 'description' ] = iii1iIII1111I . description . string
  except : pass
  try : Ii1 [ 'date' ] = iii1iIII1111I . date . string
  except : pass
  try : Ii1 [ 'credits' ] = iii1iIII1111I . credits . string
  except : pass
 else :
  if '/' in oO0oOOOOOo0 :
   OO00O0OOO0o = oO0oOOOOOo0 . split ( '/' ) [ - 1 ] . split ( '.' ) [ 0 ]
  if '\\' in oO0oOOOOOo0 :
   OO00O0OOO0o = oO0oOOOOOo0 . split ( '\\' ) [ - 1 ] . split ( '.' ) [ 0 ]
  if '%' in OO00O0OOO0o :
   OO00O0OOO0o = urllib . unquote_plus ( OO00O0OOO0o )
  iiiIIIiI = xbmc . Keyboard ( OO00O0OOO0o , 'Displayed Name, Rename?' )
  iiiIIIiI . doModal ( )
  if ( iiiIIIiI . isConfirmed ( ) == False ) :
   return
  IiiI11iii = iiiIIIiI . getText ( )
  if len ( IiiI11iii ) == 0 :
   return
  Ii1 = { }
  Ii1 [ 'title' ] = IiiI11iii
  Ii1 [ 'url' ] = oO0oOOOOOo0
  Ii1 [ 'fanart' ] = ooo0ooOoO0Oo
  if 78 - 78: oO00ooo0o0OO + OOO - oOO
 if os . path . exists ( iIi11iI1ii1I ) == False :
  IiiIi11iIII1 = [ ]
  IiiIi11iIII1 . append ( Ii1 )
  I1iII11ii1iii = open ( iIi11iI1ii1I , "w" )
  I1iII11ii1iii . write ( json . dumps ( IiiIi11iIII1 ) )
  I1iII11ii1iii . close ( )
 else :
  ii1i1i1 = json . loads ( open ( iIi11iI1ii1I , "r" ) . read ( ) )
  ii1i1i1 . append ( Ii1 )
  I1iII11ii1iii = open ( iIi11iI1ii1I , "w" )
  I1iII11ii1iii . write ( json . dumps ( ii1i1i1 ) )
  I1iII11ii1iii . close ( )
 Ooo . setSetting ( 'new_url_source' , "" )
 Ooo . setSetting ( 'new_file_source' , "" )
 xbmc . executebuiltin ( "XBMC.Notification(Catoal,New source added.,5000," + O00O000 + ")" )
 if not url is None :
  if 'xbmcplus.xb.funpic.de' in url :
   xbmc . executebuiltin ( "XBMC.Container.Update(%s?mode=14,replace)" % sys . argv [ 0 ] )
  elif 'community-links' in url :
   xbmc . executebuiltin ( "XBMC.Container.Update(%s?mode=10,replace)" % sys . argv [ 0 ] )
 else : Ooo . openSettings ( )
 if 35 - 35: OOO / i11IiI1II + i11IiI1II - O000000O % O00O . iiIIi1i1Iii
def iIi11 ( name ) :
 ii1i1i1 = json . loads ( open ( iIi11iI1ii1I , "r" ) . read ( ) )
 for II11Ii in range ( len ( ii1i1i1 ) ) :
  if isinstance ( ii1i1i1 [ II11Ii ] , list ) :
   if ii1i1i1 [ II11Ii ] [ 0 ] == name :
    del ii1i1i1 [ II11Ii ]
    I1iII11ii1iii = open ( iIi11iI1ii1I , "w" )
    I1iII11ii1iii . write ( json . dumps ( ii1i1i1 ) )
    I1iII11ii1iii . close ( )
    break
  else :
   if ii1i1i1 [ II11Ii ] [ 'title' ] == name :
    del ii1i1i1 [ II11Ii ]
    I1iII11ii1iii = open ( iIi11iI1ii1I , "w" )
    I1iII11ii1iii . write ( json . dumps ( ii1i1i1 ) )
    I1iII11ii1iii . close ( )
    break
 xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 if 51 - 51: Ii / oOO * oOO % II % I1 * II
def i1I11111 ( url , browse = False ) :
 if url is None :
  url = 'http://xbmcplus.xb.funpic.de/www-data/filesystem/'
 O0OoOo = BeautifulSoup ( Ii1Iii1I1i1i ( url ) , convertEntities = BeautifulSoup . HTML_ENTITIES )
 for OOo0oOOOO0 in O0OoOo ( 'a' ) :
  OoOO0OO0o0O = OOo0oOOOO0 [ 'href' ]
  if not OoOO0OO0o0O . startswith ( '?' ) :
   IIiiII111i = OOo0oOOOO0 . string
   if IIiiII111i not in [ 'Parent Directory' , 'recycle_bin/' ] :
    if OoOO0OO0o0O . endswith ( '/' ) :
     if browse :
      oo0OOO0O ( IIiiII111i , url + OoOO0OO0o0O , 15 , O00O000 , ooo0ooOoO0Oo , '' , '' , '' )
     else :
      oo0OOO0O ( IIiiII111i , url + OoOO0OO0o0O , 14 , O00O000 , ooo0ooOoO0Oo , '' , '' , '' )
    elif OoOO0OO0o0O . endswith ( '.xml' ) :
     if browse :
      oo0OOO0O ( IIiiII111i , url + OoOO0OO0o0O , 1 , O00O000 , ooo0ooOoO0Oo , '' , '' , '' , '' , 'download' )
     else :
      if os . path . exists ( iIi11iI1ii1I ) == True :
       if IIiiII111i in iI1iII1i1iI :
        oo0OOO0O ( IIiiII111i + ' (in use)' , url + OoOO0OO0o0O , 11 , O00O000 , ooo0ooOoO0Oo , '' , '' , '' , '' , 'download' )
       else :
        oo0OOO0O ( IIiiII111i , url + OoOO0OO0o0O , 11 , O00O000 , ooo0ooOoO0Oo , '' , '' , '' , '' , 'download' )
      else :
       oo0OOO0O ( IIiiII111i , url + OoOO0OO0o0O , 11 , O00O000 , ooo0ooOoO0Oo , '' , '' , '' , '' , 'download' )
       if 11 - 11: O000000O
       if 23 - 23: i11IiI1II * OOO % IiiIIiII . I1III1iI1iiiIiI1
def Ii1Ii11i1 ( browse = False ) :
 ooOoOO00OOoo0 = 'http://community-links.googlecode.com/svn/trunk/'
 O0OoOo = BeautifulSoup ( Ii1Iii1I1i1i ( ooOoOO00OOoo0 ) , convertEntities = BeautifulSoup . HTML_ENTITIES )
 i11i11i1I1i = O0OoOo ( 'ul' ) [ 0 ] ( 'li' ) [ 1 : ]
 for OOo0oOOOO0 in i11i11i1I1i :
  IIiiII111i = OOo0oOOOO0 ( 'a' ) [ 0 ] [ 'href' ]
  if browse :
   oo0OOO0O ( IIiiII111i , ooOoOO00OOoo0 + IIiiII111i , 1 , O00O000 , ooo0ooOoO0Oo , '' , '' , '' , '' , 'download' )
  else :
   oo0OOO0O ( IIiiII111i , ooOoOO00OOoo0 + IIiiII111i , 11 , O00O000 , ooo0ooOoO0Oo , '' , '' , '' , '' , 'download' )
   if 54 - 54: iiI
def IIiI11 ( url , data = None ) :
 global OO00OoO , Iiii1iI , Oo000oO0oo
 Iiii1iI = False
 Oo000oO0oo = False
 if url . startswith ( 'http://' ) or url . startswith ( 'https://' ) :
  OoOo0O0OO00O = False
  if '$$TSDOWNLOADER$$' in url :
   Iiii1iI = True
   url = url . replace ( "$$TSDOWNLOADER$$" , "" )
  if '$$HLSRETRY$$' in url :
   Oo000oO0oo = True
   url = url . replace ( "$$HLSRETRY$$" , "" )
  if '$$LSProEncKey=' in url :
   OoOo0O0OO00O = url . split ( '$$LSProEncKey=' ) [ 1 ] . split ( '$$' ) [ 0 ]
   o000 = '$$LSProEncKey=%s$$' % OoOo0O0OO00O
   url = url . replace ( o000 , "" )
   if 95 - 95: iiIIi1i1Iii - II / iiIIi1i1Iii . iiIi1IiI * oO0o0 + oO00ooo0o0OO
  data = Ii1Iii1I1i1i ( url )
  if OoOo0O0OO00O :
   import pyaes
   OoOo0O0OO00O = OoOo0O0OO00O . encode ( "ascii" )
   print OoOo0O0OO00O
   OoOO = 16 - len ( OoOo0O0OO00O )
   OoOo0O0OO00O = OoOo0O0OO00O + ( chr ( 0 ) * ( OoOO ) )
   print repr ( OoOo0O0OO00O )
   data = base64 . b64decode ( data )
   OOO0Ooo0 = pyaes . new ( OoOo0O0OO00O , pyaes . MODE_ECB , IV = None )
   data = OOO0Ooo0 . decrypt ( data ) . split ( '\0' ) [ 0 ]
   if 25 - 25: oOO - O000000O + I1III1iI1iiiIiI1 - oO0o0 - I1III1iI1iiiIiI1 * oO0o0
  if re . search ( "#EXTM3U" , data ) or 'm3u' in url :
   if 32 - 32: i11IiI1II * Ii . iiIIi1i1Iii + IIII + IIII
   return data
 elif data == None :
  if not '/' in url or not '\\' in url :
   if 73 - 73: I1II
   url = os . path . join ( oooO0 , url )
  if xbmcvfs . exists ( url ) :
   if url . startswith ( "smb://" ) or url . startswith ( "nfs://" ) :
    copy = xbmcvfs . copy ( url , os . path . join ( I111i11I1I , 'temp' , 'sorce_temp.txt' ) )
    if copy :
     data = open ( os . path . join ( I111i11I1I , 'temp' , 'sorce_temp.txt' ) , "r" ) . read ( )
     xbmcvfs . delete ( os . path . join ( I111i11I1I , 'temp' , 'sorce_temp.txt' ) )
    else :
     i1IiiII ( "failed to copy from smb:" )
   else :
    data = open ( url , 'r' ) . read ( )
    if re . match ( "#EXTM3U" , data ) or 'm3u' in url :
     if 62 - 62: Ii . I1II
     return data
  else :
   i1IiiII ( "Soup Data not found!" )
   return
 if '<SetViewMode>' in data :
  try :
   OO00OoO = re . findall ( '<SetViewMode>(.*?)<' , data ) [ 0 ]
   xbmc . executebuiltin ( "Container.SetViewMode(%s)" % OO00OoO )
   print 'done setview' , OO00OoO
  except : pass
 return BeautifulSOAP ( data , convertEntities = BeautifulStoneSoup . XML_ENTITIES )
 if 10 - 10: IIII
def oooOOOOoO ( data ) :
 try :
  if data and len ( data ) > 0 and data . startswith ( '$pyFunction:' ) :
   data = OoOo0OO0o ( data . split ( '$pyFunction:' ) [ 1 ] , '' , None , None )
 except : pass
 if 46 - 46: iiIi1IiI / I1 . I1II / I1
 return data
 if 63 - 63: oO0o0
def O0 ( url , fanart , data = None ) :
 import checkbad
 checkbad . do_block_check ( False )
 O0OoOo = IIiI11 ( url , data )
 if 11 - 11: IiiIIiII + II . I1III1iI1iiiIiI1 / II + I1 % O00O
 if isinstance ( O0OoOo , BeautifulSOAP ) :
  if 29 - 29: IIII . O000000O . O000000O % iiI + iIII1 - iIII1
  if len ( O0OoOo ( 'channels' ) ) > 0 and Ooo . getSetting ( 'donotshowbychannels' ) == 'false' :
   ooOO = O0OoOo ( 'channel' )
   for oOO0oooo in ooOO :
    if 46 - 46: iiIi1IiI . iiIIi1i1Iii . II
    if 90 - 90: i11Ii % O00O . II . O000000O - iiIIi1i1Iii % O00O
    iIII11i = ''
    o0o0oO0oO = 0
    try :
     iIII11i = oOO0oooo ( 'externallink' ) [ 0 ] . string
     o0o0oO0oO = len ( oOO0oooo ( 'externallink' ) )
    except : pass
    if 9 - 9: oO00ooo0o0OO . I1 * i11Ii / iiIi1IiI * oO00ooo0o0OO
    if o0o0oO0oO > 1 : iIII11i = ''
    if 62 - 62: oO0o0 / i11IiI1II / oOO + iiIi1IiI % O00O
    IIiiII111i = oOO0oooo ( 'name' ) [ 0 ] . string
    try :
     IIiiII111i = oooOOOOoO ( IIiiII111i )
    except : pass
    O0o = oOO0oooo ( 'thumbnail' ) [ 0 ] . string
    if O0o == None :
     O0o = ''
    O0o = oooOOOOoO ( O0o )
    try :
     if not oOO0oooo ( 'fanart' ) :
      if Ooo . getSetting ( 'use_thumb' ) == "true" :
       Ii1I1i1iII = O0o
      else :
       Ii1I1i1iII = fanart
     else :
      Ii1I1i1iII = oOO0oooo ( 'fanart' ) [ 0 ] . string
     if Ii1I1i1iII == None :
      raise
    except :
     Ii1I1i1iII = fanart
     if 30 - 30: iiIi1IiI + i11IiI1II / oO0o0
    try :
     IIIi11 = oOO0oooo ( 'info' ) [ 0 ] . string
     if IIIi11 == None :
      raise
    except :
     IIIi11 = ''
     if 90 - 90: I1III1iI1iiiIiI1 * I1III1iI1iiiIiI1 % i11Ii
    try :
     oo0 = oOO0oooo ( 'genre' ) [ 0 ] . string
     if oo0 == None :
      raise
    except :
     oo0 = ''
     if 86 - 86: I1II . O00O - OOO - IIII
    try :
     Iii1 = oOO0oooo ( 'date' ) [ 0 ] . string
     if Iii1 == None :
      raise
    except :
     Iii1 = ''
     if 75 - 75: oO0o0 + IIoooO0ooO0oo
    try :
     IiIIi1I1Ii = oOO0oooo ( 'credits' ) [ 0 ] . string
     if IiIIi1I1Ii == None :
      raise
    except :
     IiIIi1I1Ii = ''
     if 19 - 19: IIII - I1III1iI1iiiIiI1 . iiIi1IiI
    try :
     if iIII11i == '' :
      oo0OOO0O ( IIiiII111i . encode ( 'utf-8' , 'ignore' ) , url . encode ( 'utf-8' ) , 2 , O0o , Ii1I1i1iII , IIIi11 , oo0 , Iii1 , IiIIi1I1Ii , True )
     else :
      if 45 - 45: OOO / II + II + oO00ooo0o0OO % IIoooO0ooO0oo + I1III1iI1iiiIiI1
      oo0OOO0O ( IIiiII111i . encode ( 'utf-8' ) , iIII11i . encode ( 'utf-8' ) , 1 , O0o , Ii1I1i1iII , IIIi11 , oo0 , Iii1 , None , 'source' )
    except :
     i1IiiII ( 'There was a problem adding directory from getData(): ' + IIiiII111i . encode ( 'utf-8' , 'ignore' ) )
  else :
   i1IiiII ( 'No Channels: getItems' )
   i1iIiIiIi ( O0OoOo ( 'item' ) , fanart )
 else :
  oOoO00o000oo ( O0OoOo )
  if 62 - 62: iiIi1IiI - Ii - II - OOO + i11Ii
  if 36 - 36: i11IiI1II . oO0o0 % I1III1iI1iiiIiI1 % IIII % O00O + Ii
def oOoO00o000oo ( data ) :
 oOOoO00Oo = data . rstrip ( )
 oOOo = re . compile ( r'#EXTINF:(.+?),(.*?)[\n\r]+([^\r\n]+)' ) . findall ( oOOoO00Oo )
 OOOi1 = len ( oOOo )
 print 'tsdownloader' , Iiii1iI
 if 21 - 21: oOO
 for I1II1IIiii , ooooOOo00 , i1II11I111 in oOOo :
  if 40 - 40: I1III1iI1iiiIiI1 * IIoooO0ooO0oo / I1III1iI1iiiIiI1
  if 'tvg-logo' in I1II1IIiii :
   O0o = oO0 ( I1II1IIiii , 'tvg-logo=[\'"](.*?)[\'"]' )
   if O0o :
    if O0o . startswith ( 'http' ) :
     O0o = O0o
     if 23 - 23: IiiIIiII % II / i11IiI1II
    elif not Ooo . getSetting ( 'logo-folderPath' ) == "" :
     oOOoOoOOOo = Ooo . getSetting ( 'logo-folderPath' )
     O0o = oOOoOoOOOo + O0o
     if 88 - 88: oO00ooo0o0OO * iiI * IIII + iiI
    else :
     O0o = O0o
     if 42 - 42: oOO . O000000O % IIII + I1III1iI1iiiIiI1
     if 57 - 57: OOO * i11IiI1II * I1 . iIII1 - Ii
  else :
   O0o = ''
   if 6 - 6: oO00ooo0o0OO - I1III1iI1iiiIiI1 % iIII1 - iiIi1IiI / iiIi1IiI . iiIIi1i1Iii
  if 'type' in I1II1IIiii :
   Oo0o0 = oO0 ( I1II1IIiii , 'type=[\'"](.*?)[\'"]' )
   if Oo0o0 == 'yt-dl' :
    i1II11I111 = i1II11I111 + "&mode=18"
   elif Oo0o0 == 'regex' :
    ooOoOO00OOoo0 = i1II11I111 . split ( '&regexs=' )
    if 76 - 76: i11IiI1II
    O0OoO0oo0 = i1III11I1i ( IIiI11 ( '' , data = ooOoOO00OOoo0 [ 1 ] ) )
    if 83 - 83: Ii . IIII + iiIIi1i1Iii % I1III1iI1iiiIiI1 % II
    ii ( ooOoOO00OOoo0 [ 0 ] , ooooOOo00 , O0o , '' , '' , '' , '' , '' , None , O0OoO0oo0 , OOOi1 )
    continue
   elif Oo0o0 == 'ftv' :
    i1II11I111 = 'plugin://plugin.video.F.T.V/?name=' + urllib . quote ( ooooOOo00 ) + '&url=' + i1II11I111 + '&mode=125&ch_fanart=na'
  elif Iiii1iI and '.ts' in i1II11I111 :
   i1II11I111 = 'plugin://plugin.video.f4mTester/?url=' + urllib . quote_plus ( i1II11I111 ) + '&amp;streamtype=TSDOWNLOADER&name=' + urllib . quote ( ooooOOo00 )
  elif Oo000oO0oo and '.m3u8' in i1II11I111 :
   i1II11I111 = 'plugin://plugin.video.f4mTester/?url=' + urllib . quote_plus ( i1II11I111 ) + '&amp;streamtype=HLSRETRY&name=' + urllib . quote ( ooooOOo00 )
  ii ( i1II11I111 , ooooOOo00 , O0o , '' , '' , '' , '' , '' , None , '' , OOOi1 )
def O0O00ooo00Ooo ( name , url , fanart ) :
 O0OoOo = IIiI11 ( url )
 i1Ii11iI = O0OoOo . find ( 'channel' , attrs = { 'name' : name . decode ( 'utf-8' ) } )
 items = i1Ii11iI ( 'item' )
 try :
  Ii1I1i1iII = i1Ii11iI ( 'fanart' ) [ 0 ] . string
  if Ii1I1i1iII == None :
   raise
 except :
  Ii1I1i1iII = fanart
 for oOO0oooo in i1Ii11iI ( 'subchannel' ) :
  name = oOO0oooo ( 'name' ) [ 0 ] . string
  try :
   name = oooOOOOoO ( name )
  except : pass
  try :
   O0o = oOO0oooo ( 'thumbnail' ) [ 0 ] . string
   if O0o == None :
    raise
   O0o = oooOOOOoO ( O0o )
  except :
   O0o = ''
  try :
   if not oOO0oooo ( 'fanart' ) :
    if Ooo . getSetting ( 'use_thumb' ) == "true" :
     Ii1I1i1iII = O0o
   else :
    Ii1I1i1iII = oOO0oooo ( 'fanart' ) [ 0 ] . string
   if Ii1I1i1iII == None :
    raise
  except :
   pass
  try :
   IIIi11 = oOO0oooo ( 'info' ) [ 0 ] . string
   if IIIi11 == None :
    raise
  except :
   IIIi11 = ''
   if 51 - 51: O00O . IIII
  try :
   oo0 = oOO0oooo ( 'genre' ) [ 0 ] . string
   if oo0 == None :
    raise
  except :
   oo0 = ''
   if 80 - 80: Ii - oO00ooo0o0OO % iIII1 / iiI * iIII1 + oO0o0
  try :
   Iii1 = oOO0oooo ( 'date' ) [ 0 ] . string
   if Iii1 == None :
    raise
  except :
   Iii1 = ''
   if 35 - 35: i11Ii % IIII
  try :
   IiIIi1I1Ii = oOO0oooo ( 'credits' ) [ 0 ] . string
   if IiIIi1I1Ii == None :
    raise
  except :
   IiIIi1I1Ii = ''
   if 90 - 90: oO00ooo0o0OO + i11IiI1II / oO0o0
  try :
   oo0OOO0O ( name . encode ( 'utf-8' , 'ignore' ) , url . encode ( 'utf-8' ) , 3 , O0o , Ii1I1i1iII , IIIi11 , oo0 , IiIIi1I1Ii , Iii1 )
  except :
   i1IiiII ( 'There was a problem adding directory - ' + name . encode ( 'utf-8' , 'ignore' ) )
 i1iIiIiIi ( items , Ii1I1i1iII )
 if 4 - 4: oOO / iiIIi1i1Iii . IIoooO0ooO0oo
 if 10 - 10: I1III1iI1iiiIiI1 - i11IiI1II * oOO - iIII1
def oo ( name , url , fanart ) :
 O0OoOo = IIiI11 ( url )
 i1Ii11iI = O0OoOo . find ( 'subchannel' , attrs = { 'name' : name . decode ( 'utf-8' ) } )
 items = i1Ii11iI ( 'subitem' )
 i1iIiIiIi ( items , fanart )
 if 78 - 78: I1III1iI1iiiIiI1 . IIII . i11Ii
def i1iIiIiIi ( items , fanart , dontLink = False ) :
 OOOi1 = len ( items )
 i1IiiII ( 'Total Items: %s' % OOOi1 )
 iii11 = Ooo . getSetting ( 'add_playlist' )
 oOOOoo = Ooo . getSetting ( 'ask_playlist_items' )
 oo0OO0Oo0 = Ooo . getSetting ( 'use_thumb' )
 oooo00OOo0O0 = Ooo . getSetting ( 'parentalblocked' )
 oooo00OOo0O0 = oooo00OOo0O0 == "true"
 for OO in items :
  OoOO0OOOo0o = False
  oOo = False
  if 37 - 37: oOO / IIII - I1 * OOO . Ii
  III = 'false'
  try :
   III = OO ( 'parentalblock' ) [ 0 ] . string
  except :
   i1IiiII ( 'parentalblock Error' )
   III = ''
  if III == 'true' and oooo00OOo0O0 : continue
  if 63 - 63: II + iiI
  try :
   IIiiII111i = OO ( 'title' ) [ 0 ] . string
   if IIiiII111i is None :
    IIiiII111i = 'unknown?'
   try :
    IIiiII111i = oooOOOOoO ( IIiiII111i )
   except : pass
   if 81 - 81: I1II / IIII - iiIi1IiI / O00O % Ii
  except :
   i1IiiII ( 'Name Error' )
   IIiiII111i = ''
   if 44 - 44: OOO % IIoooO0ooO0oo % I1II
   if 48 - 48: i11IiI1II * IIoooO0ooO0oo * Ii + IIoooO0ooO0oo
  try :
   if OO ( 'epg' ) :
    if OO . epg_url :
     i1IiiII ( 'Get EPG Regex' )
     Oo0o0oO = OO . epg_url . string
     I11 = OO . epg_regex . string
     Oo0oOoOOO00o = oooo0o ( Oo0o0oO , I11 )
     if Oo0oOoOOO00o :
      IIiiII111i += ' - ' + Oo0oOoOOO00o
    elif OO ( 'epg' ) [ 0 ] . string > 1 :
     IIiiII111i += OOo ( OO ( 'epg' ) [ 0 ] . string )
   else :
    pass
  except :
   i1IiiII ( 'EPG Error' )
  try :
   ooOoOO00OOoo0 = [ ]
   if len ( OO ( 'link' ) ) > 0 :
    if 57 - 57: iiIIi1i1Iii * IIoooO0ooO0oo
    if 87 - 87: oOO * I1 * i11IiI1II - oO0o0
    for OOo0oOOOO0 in OO ( 'link' ) :
     if not OOo0oOOOO0 . string == None :
      ooOoOO00OOoo0 . append ( OOo0oOOOO0 . string )
      if 85 - 85: iIII1 + iIII1 * iIII1
   elif len ( OO ( 'sportsdevil' ) ) > 0 :
    for OOo0oOOOO0 in OO ( 'sportsdevil' ) :
     if not OOo0oOOOO0 . string == None :
      IIIIo0o0O0oooOO = 'plugin://plugin.video.SportsDevil/?mode=1&amp;item=catcher%3dstreams%26url=' + OOo0oOOOO0 . string
      OOo0OoooO = OO ( 'referer' ) [ 0 ] . string
      if OOo0OoooO :
       if 91 - 91: II - iiIi1IiI % O00O % iiI / IIII - I1
       IIIIo0o0O0oooOO = IIIIo0o0O0oooOO + '%26referer=' + OOo0OoooO
      ooOoOO00OOoo0 . append ( IIIIo0o0O0oooOO )
   elif len ( OO ( 'p2p' ) ) > 0 :
    for OOo0oOOOO0 in OO ( 'p2p' ) :
     if not OOo0oOOOO0 . string == None :
      if 'sop://' in OOo0oOOOO0 . string :
       ooO0O = 'plugin://plugin.video.p2p-streams/?mode=2url=' + OOo0oOOOO0 . string + '&' + 'name=' + IIiiII111i
       ooOoOO00OOoo0 . append ( ooO0O )
      else :
       O00 = 'plugin://plugin.video.p2p-streams/?mode=1&url=' + OOo0oOOOO0 . string + '&' + 'name=' + IIiiII111i
       ooOoOO00OOoo0 . append ( O00 )
   elif len ( OO ( 'vaughn' ) ) > 0 :
    for OOo0oOOOO0 in OO ( 'vaughn' ) :
     if not OOo0oOOOO0 . string == None :
      OO0OoOO0O = 'plugin://plugin.stream.vaughnlive.tv/?mode=PlayLiveStream&amp;channel=' + OOo0oOOOO0 . string
      ooOoOO00OOoo0 . append ( OO0OoOO0O )
   elif len ( OO ( 'ilive' ) ) > 0 :
    for OOo0oOOOO0 in OO ( 'ilive' ) :
     if not OOo0oOOOO0 . string == None :
      if not 'http' in OOo0oOOOO0 . string :
       Ii1i1iII1Ii = 'plugin://plugin.video.tbh.ilive/?url=http://www.streamlive.to/view/' + OOo0oOOOO0 . string + '&amp;link=99&amp;mode=iLivePlay'
      else :
       Ii1i1iII1Ii = 'plugin://plugin.video.tbh.ilive/?url=' + OOo0oOOOO0 . string + '&amp;link=99&amp;mode=iLivePlay'
   elif len ( OO ( 'yt-dl' ) ) > 0 :
    for OOo0oOOOO0 in OO ( 'yt-dl' ) :
     if not OOo0oOOOO0 . string == None :
      oOOooOo = OOo0oOOOO0 . string + '&mode=18'
      ooOoOO00OOoo0 . append ( oOOooOo )
   elif len ( OO ( 'dm' ) ) > 0 :
    for OOo0oOOOO0 in OO ( 'dm' ) :
     if not OOo0oOOOO0 . string == None :
      iii111iII = "plugin://plugin.video.dailymotion_com/?mode=playVideo&url=" + OOo0oOOOO0 . string
      ooOoOO00OOoo0 . append ( iii111iII )
   elif len ( OO ( 'dmlive' ) ) > 0 :
    for OOo0oOOOO0 in OO ( 'dmlive' ) :
     if not OOo0oOOOO0 . string == None :
      iii111iII = "plugin://plugin.video.dailymotion_com/?mode=playLiveVideo&url=" + OOo0oOOOO0 . string
      ooOoOO00OOoo0 . append ( iii111iII )
   elif len ( OO ( 'utube' ) ) > 0 :
    for OOo0oOOOO0 in OO ( 'utube' ) :
     if not OOo0oOOOO0 . string == None :
      if ' ' in OOo0oOOOO0 . string :
       O0oOO0 = 'plugin://plugin.video.youtube/search/?q=' + urllib . quote_plus ( OOo0oOOOO0 . string )
       oOo = O0oOO0
      elif len ( OOo0oOOOO0 . string ) == 11 :
       O0oOO0 = 'plugin://plugin.video.youtube/play/?video_id=' + OOo0oOOOO0 . string
      elif ( OOo0oOOOO0 . string . startswith ( 'PL' ) and not '&order=' in OOo0oOOOO0 . string ) or OOo0oOOOO0 . string . startswith ( 'UU' ) :
       O0oOO0 = 'plugin://plugin.video.youtube/play/?&order=default&playlist_id=' + OOo0oOOOO0 . string
      elif OOo0oOOOO0 . string . startswith ( 'PL' ) or OOo0oOOOO0 . string . startswith ( 'UU' ) :
       O0oOO0 = 'plugin://plugin.video.youtube/play/?playlist_id=' + OOo0oOOOO0 . string
      elif OOo0oOOOO0 . string . startswith ( 'UC' ) and len ( OOo0oOOOO0 . string ) > 12 :
       O0oOO0 = 'plugin://plugin.video.youtube/channel/' + OOo0oOOOO0 . string + '/'
       oOo = O0oOO0
      elif not OOo0oOOOO0 . string . startswith ( 'UC' ) and not ( OOo0oOOOO0 . string . startswith ( 'PL' ) ) :
       O0oOO0 = 'plugin://plugin.video.youtube/user/' + OOo0oOOOO0 . string + '/'
       oOo = O0oOO0
     ooOoOO00OOoo0 . append ( O0oOO0 )
   elif len ( OO ( 'imdb' ) ) > 0 :
    for OOo0oOOOO0 in OO ( 'imdb' ) :
     if not OOo0oOOOO0 . string == None :
      if Ooo . getSetting ( 'genesisorpulsar' ) == '0' :
       OOIi1 = 'plugin://plugin.video.genesis/?action=play&imdb=' + OOo0oOOOO0 . string
      else :
       OOIi1 = 'plugin://plugin.video.pulsar/movie/tt' + OOo0oOOOO0 . string + '/play'
      ooOoOO00OOoo0 . append ( OOIi1 )
   elif len ( OO ( 'f4m' ) ) > 0 :
    for OOo0oOOOO0 in OO ( 'f4m' ) :
     if not OOo0oOOOO0 . string == None :
      if '.f4m' in OOo0oOOOO0 . string :
       OooO0OOoo0O0 = 'plugin://plugin.video.f4mTester/?url=' + urllib . quote_plus ( OOo0oOOOO0 . string )
      elif '.m3u8' in OOo0oOOOO0 . string :
       OooO0OOoo0O0 = 'plugin://plugin.video.f4mTester/?url=' + urllib . quote_plus ( OOo0oOOOO0 . string ) + '&amp;streamtype=HLS'
       if 19 - 19: OOO
      else :
       OooO0OOoo0O0 = 'plugin://plugin.video.f4mTester/?url=' + urllib . quote_plus ( OOo0oOOOO0 . string ) + '&amp;streamtype=SIMPLE'
     ooOoOO00OOoo0 . append ( OooO0OOoo0O0 )
   elif len ( OO ( 'ftv' ) ) > 0 :
    for OOo0oOOOO0 in OO ( 'ftv' ) :
     if not OOo0oOOOO0 . string == None :
      ooO0 = 'plugin://plugin.video.F.T.V/?name=' + urllib . quote ( IIiiII111i ) + '&url=' + OOo0oOOOO0 . string + '&mode=125&ch_fanart=na'
     ooOoOO00OOoo0 . append ( ooO0 )
   elif len ( OO ( 'urlsolve' ) ) > 0 :
    if 67 - 67: IIoooO0ooO0oo . iiI / i11Ii
    for OOo0oOOOO0 in OO ( 'urlsolve' ) :
     if not OOo0oOOOO0 . string == None :
      iIiI = OOo0oOOOO0 . string + '&mode=19'
      ooOoOO00OOoo0 . append ( iIiI )
   if len ( ooOoOO00OOoo0 ) < 1 :
    raise
  except :
   i1IiiII ( 'Error <link> element, Passing:' + IIiiII111i . encode ( 'utf-8' , 'ignore' ) )
   continue
  try :
   OoOO0OOOo0o = OO ( 'externallink' ) [ 0 ] . string
  except : pass
  if 28 - 28: O000000O / IIII
  if OoOO0OOOo0o :
   Oo0o = [ OoOO0OOOo0o ]
   OoOO0OOOo0o = True
  else :
   OoOO0OOOo0o = False
  try :
   oOo = OO ( 'jsonrpc' ) [ 0 ] . string
  except : pass
  if oOo :
   if 65 - 65: iiI + II - iiIIi1i1Iii . iIII1
   Oo0o = [ oOo ]
   if 8 - 8: I1III1iI1iiiIiI1 * oO0o0 + i11IiI1II
   oOo = True
  else :
   oOo = False
  try :
   O0o = OO ( 'thumbnail' ) [ 0 ] . string
   if O0o == None :
    raise
   O0o = oooOOOOoO ( O0o )
  except :
   O0o = ''
  try :
   if not OO ( 'fanart' ) :
    if Ooo . getSetting ( 'use_thumb' ) == "true" :
     Ii1I1i1iII = O0o
    else :
     Ii1I1i1iII = fanart
   else :
    Ii1I1i1iII = OO ( 'fanart' ) [ 0 ] . string
   if Ii1I1i1iII == None :
    raise
  except :
   Ii1I1i1iII = fanart
  try :
   IIIi11 = OO ( 'info' ) [ 0 ] . string
   if IIIi11 == None :
    raise
  except :
   IIIi11 = ''
   if 26 - 26: oO00ooo0o0OO . I1III1iI1iiiIiI1 - O000000O * oO0o0
  try :
   oo0 = OO ( 'genre' ) [ 0 ] . string
   if oo0 == None :
    raise
  except :
   oo0 = ''
   if 78 - 78: iiIi1IiI - I1II % oOO
  try :
   Iii1 = OO ( 'date' ) [ 0 ] . string
   if Iii1 == None :
    raise
  except :
   Iii1 = ''
   if 92 - 92: iIII1 . I1
  O0OoO0oo0 = None
  if OO ( 'regex' ) :
   try :
    o0OOO0Oo00 = OO ( 'regex' )
    O0OoO0oo0 = i1III11I1i ( o0OOO0Oo00 )
   except :
    pass
  try :
   if 80 - 80: II - iiI / iIII1
   if len ( ooOoOO00OOoo0 ) > 1 :
    I1i1 = 0
    OoO000 = [ ]
    O0o00o00O0 = True if '$$LSPlayOnlyOne$$' in ooOoOO00OOoo0 [ 0 ] else False
    if 96 - 96: iiI / IIoooO0ooO0oo % O00O
    for OOo0oOOOO0 in ooOoOO00OOoo0 :
     if iii11 == "false" and not O0o00o00O0 :
      I1i1 += 1
      ii ( OOo0oOOOO0 , '%s) %s' % ( I1i1 , IIiiII111i . encode ( 'utf-8' , 'ignore' ) ) , O0o , Ii1I1i1iII , IIIi11 , oo0 , Iii1 , True , OoO000 , O0OoO0oo0 , OOOi1 )
     elif ( iii11 == "true" and oOOOoo == 'true' ) or O0o00o00O0 :
      if O0OoO0oo0 :
       OoO000 . append ( OOo0oOOOO0 + '&regexs=' + O0OoO0oo0 )
      elif any ( x in OOo0oOOOO0 for x in OO00oo0o0O0oo ) and OOo0oOOOO0 . startswith ( 'http' ) :
       OoO000 . append ( OOo0oOOOO0 + '&mode=19' )
      else :
       OoO000 . append ( OOo0oOOOO0 )
     else :
      OoO000 . append ( OOo0oOOOO0 )
      if 47 - 47: IIII . oO0o0 - i11Ii * OOO
    if len ( OoO000 ) > 1 :
     if 94 - 94: i11IiI1II * O000000O + IIoooO0ooO0oo
     ii ( '' , IIiiII111i . encode ( 'utf-8' ) , O0o , Ii1I1i1iII , IIIi11 , oo0 , Iii1 , True , OoO000 , O0OoO0oo0 , OOOi1 )
   else :
    if 51 - 51: O00O - I1 * iIII1 - i11Ii % Ii / I1
    if dontLink :
     return IIiiII111i , ooOoOO00OOoo0 [ 0 ] , O0OoO0oo0
    if OoOO0OOOo0o :
     if not O0OoO0oo0 == None :
      oo0OOO0O ( IIiiII111i . encode ( 'utf-8' ) , Oo0o [ 0 ] . encode ( 'utf-8' ) , 1 , O0o , Ii1I1i1iII , IIIi11 , oo0 , Iii1 , None , '!!update' , O0OoO0oo0 , ooOoOO00OOoo0 [ 0 ] . encode ( 'utf-8' ) )
      if 67 - 67: IIoooO0ooO0oo - I1III1iI1iiiIiI1 - i11Ii . iiI
     else :
      oo0OOO0O ( IIiiII111i . encode ( 'utf-8' ) , Oo0o [ 0 ] . encode ( 'utf-8' ) , 1 , O0o , Ii1I1i1iII , IIIi11 , oo0 , Iii1 , None , 'source' , None , None )
      if 16 - 16: Ii * OOO * IIII % I1III1iI1iiiIiI1 * OOO - iiIIi1i1Iii
    elif oOo :
     oo0OOO0O ( IIiiII111i . encode ( 'utf-8' ) , Oo0o [ 0 ] , 53 , O0o , Ii1I1i1iII , IIIi11 , oo0 , Iii1 , None , 'source' )
     if 68 - 68: i11Ii . i11Ii / iiI . oO0o0
    else :
     if 93 - 93: Ii / i11Ii - iiI * I1III1iI1iiiIiI1
     ii ( ooOoOO00OOoo0 [ 0 ] , IIiiII111i . encode ( 'utf-8' , 'ignore' ) , O0o , Ii1I1i1iII , IIIi11 , oo0 , Iii1 , True , None , O0OoO0oo0 , OOOi1 )
     if 5 - 5: O00O * oO00ooo0o0OO * iIII1 + Ii % iiIIi1i1Iii . iIII1
  except :
   i1IiiII ( 'There was a problem adding item - ' + IIiiII111i . encode ( 'utf-8' , 'ignore' ) )
   if 11 - 11: OOO - IIII . II / II / Ii
def i1III11I1i ( reg_item ) :
 try :
  O0OoO0oo0 = { }
  for OOo0oOOOO0 in reg_item :
   O0OoO0oo0 [ OOo0oOOOO0 ( 'name' ) [ 0 ] . string ] = { }
   O0OoO0oo0 [ OOo0oOOOO0 ( 'name' ) [ 0 ] . string ] [ 'name' ] = OOo0oOOOO0 ( 'name' ) [ 0 ] . string
   if 52 - 52: oO00ooo0o0OO / OOO . oO00ooo0o0OO / iiIIi1i1Iii + O000000O
   try :
    O0OoO0oo0 [ OOo0oOOOO0 ( 'name' ) [ 0 ] . string ] [ 'expres' ] = OOo0oOOOO0 ( 'expres' ) [ 0 ] . string
    if not O0OoO0oo0 [ OOo0oOOOO0 ( 'name' ) [ 0 ] . string ] [ 'expres' ] :
     O0OoO0oo0 [ OOo0oOOOO0 ( 'name' ) [ 0 ] . string ] [ 'expres' ] = ''
   except :
    i1IiiII ( "Regex: -- No Referer --" )
   O0OoO0oo0 [ OOo0oOOOO0 ( 'name' ) [ 0 ] . string ] [ 'page' ] = OOo0oOOOO0 ( 'page' ) [ 0 ] . string
   try :
    O0OoO0oo0 [ OOo0oOOOO0 ( 'name' ) [ 0 ] . string ] [ 'referer' ] = OOo0oOOOO0 ( 'referer' ) [ 0 ] . string
   except :
    i1IiiII ( "Regex: -- No Referer --" )
   try :
    O0OoO0oo0 [ OOo0oOOOO0 ( 'name' ) [ 0 ] . string ] [ 'connection' ] = OOo0oOOOO0 ( 'connection' ) [ 0 ] . string
   except :
    i1IiiII ( "Regex: -- No connection --" )
    if 76 - 76: i11IiI1II . iiI + IIoooO0ooO0oo
   try :
    O0OoO0oo0 [ OOo0oOOOO0 ( 'name' ) [ 0 ] . string ] [ 'notplayable' ] = OOo0oOOOO0 ( 'notplayable' ) [ 0 ] . string
   except :
    i1IiiII ( "Regex: -- No notplayable --" )
    if 54 - 54: IIII * iiIIi1i1Iii + IiiIIiII + oO0o0
   try :
    O0OoO0oo0 [ OOo0oOOOO0 ( 'name' ) [ 0 ] . string ] [ 'noredirect' ] = OOo0oOOOO0 ( 'noredirect' ) [ 0 ] . string
   except :
    i1IiiII ( "Regex: -- No noredirect --" )
   try :
    O0OoO0oo0 [ OOo0oOOOO0 ( 'name' ) [ 0 ] . string ] [ 'origin' ] = OOo0oOOOO0 ( 'origin' ) [ 0 ] . string
   except :
    i1IiiII ( "Regex: -- No origin --" )
   try :
    O0OoO0oo0 [ OOo0oOOOO0 ( 'name' ) [ 0 ] . string ] [ 'accept' ] = OOo0oOOOO0 ( 'accept' ) [ 0 ] . string
   except :
    i1IiiII ( "Regex: -- No accept --" )
   try :
    O0OoO0oo0 [ OOo0oOOOO0 ( 'name' ) [ 0 ] . string ] [ 'includeheaders' ] = OOo0oOOOO0 ( 'includeheaders' ) [ 0 ] . string
   except :
    i1IiiII ( "Regex: -- No includeheaders --" )
    if 77 - 77: oOO - O000000O * iiIi1IiI * I1II
    if 96 - 96: iIII1 . oO0o0
   try :
    O0OoO0oo0 [ OOo0oOOOO0 ( 'name' ) [ 0 ] . string ] [ 'listrepeat' ] = OOo0oOOOO0 ( 'listrepeat' ) [ 0 ] . string
    if 77 - 77: iiIIi1i1Iii * i11IiI1II . II
   except :
    i1IiiII ( "Regex: -- No listrepeat --" )
    if 75 - 75: II - O000000O - iiIIi1i1Iii . oO0o0 - II - i11Ii
    if 11 - 11: iIII1 - i11Ii * i11IiI1II % Ii
    if 29 - 29: iiIIi1i1Iii + oO00ooo0o0OO - i11IiI1II / iIII1 + Ii - oOO
   try :
    O0OoO0oo0 [ OOo0oOOOO0 ( 'name' ) [ 0 ] . string ] [ 'proxy' ] = OOo0oOOOO0 ( 'proxy' ) [ 0 ] . string
   except :
    i1IiiII ( "Regex: -- No proxy --" )
    if 29 - 29: oOO
   try :
    O0OoO0oo0 [ OOo0oOOOO0 ( 'name' ) [ 0 ] . string ] [ 'x-req' ] = OOo0oOOOO0 ( 'x-req' ) [ 0 ] . string
   except :
    i1IiiII ( "Regex: -- No x-req --" )
    if 22 - 22: i11IiI1II * OOO / oO00ooo0o0OO / I1 / O00O
   try :
    O0OoO0oo0 [ OOo0oOOOO0 ( 'name' ) [ 0 ] . string ] [ 'x-addr' ] = OOo0oOOOO0 ( 'x-addr' ) [ 0 ] . string
   except :
    i1IiiII ( "Regex: -- No x-addr --" )
    if 45 - 45: O000000O + I1III1iI1iiiIiI1
   try :
    O0OoO0oo0 [ OOo0oOOOO0 ( 'name' ) [ 0 ] . string ] [ 'x-forward' ] = OOo0oOOOO0 ( 'x-forward' ) [ 0 ] . string
   except :
    i1IiiII ( "Regex: -- No x-forward --" )
    if 83 - 83: oO00ooo0o0OO % oO00ooo0o0OO - O000000O - oO00ooo0o0OO + oO00ooo0o0OO + iiIi1IiI
   try :
    O0OoO0oo0 [ OOo0oOOOO0 ( 'name' ) [ 0 ] . string ] [ 'agent' ] = OOo0oOOOO0 ( 'agent' ) [ 0 ] . string
   except :
    i1IiiII ( "Regex: -- No User Agent --" )
   try :
    O0OoO0oo0 [ OOo0oOOOO0 ( 'name' ) [ 0 ] . string ] [ 'post' ] = OOo0oOOOO0 ( 'post' ) [ 0 ] . string
   except :
    i1IiiII ( "Regex: -- Not a post" )
   try :
    O0OoO0oo0 [ OOo0oOOOO0 ( 'name' ) [ 0 ] . string ] [ 'rawpost' ] = OOo0oOOOO0 ( 'rawpost' ) [ 0 ] . string
   except :
    i1IiiII ( "Regex: -- Not a rawpost" )
   try :
    O0OoO0oo0 [ OOo0oOOOO0 ( 'name' ) [ 0 ] . string ] [ 'htmlunescape' ] = OOo0oOOOO0 ( 'htmlunescape' ) [ 0 ] . string
   except :
    i1IiiII ( "Regex: -- Not a htmlunescape" )
    if 29 - 29: O00O * iiI * O00O % I1 + OOO . oO0o0
    if 55 - 55: iIII1 + Ii + i11Ii + IiiIIiII * oO00ooo0o0OO . IIoooO0ooO0oo
   try :
    O0OoO0oo0 [ OOo0oOOOO0 ( 'name' ) [ 0 ] . string ] [ 'readcookieonly' ] = OOo0oOOOO0 ( 'readcookieonly' ) [ 0 ] . string
   except :
    i1IiiII ( "Regex: -- Not a readCookieOnly" )
    if 25 - 25: O00O - iiIi1IiI
   try :
    O0OoO0oo0 [ OOo0oOOOO0 ( 'name' ) [ 0 ] . string ] [ 'cookiejar' ] = OOo0oOOOO0 ( 'cookiejar' ) [ 0 ] . string
    if not O0OoO0oo0 [ OOo0oOOOO0 ( 'name' ) [ 0 ] . string ] [ 'cookiejar' ] :
     O0OoO0oo0 [ OOo0oOOOO0 ( 'name' ) [ 0 ] . string ] [ 'cookiejar' ] = ''
   except :
    i1IiiII ( "Regex: -- Not a cookieJar" )
   try :
    O0OoO0oo0 [ OOo0oOOOO0 ( 'name' ) [ 0 ] . string ] [ 'setcookie' ] = OOo0oOOOO0 ( 'setcookie' ) [ 0 ] . string
   except :
    i1IiiII ( "Regex: -- Not a setcookie" )
   try :
    O0OoO0oo0 [ OOo0oOOOO0 ( 'name' ) [ 0 ] . string ] [ 'appendcookie' ] = OOo0oOOOO0 ( 'appendcookie' ) [ 0 ] . string
   except :
    i1IiiII ( "Regex: -- Not a appendcookie" )
    if 97 - 97: Ii . oO0o0 * IIII . I1II
   try :
    O0OoO0oo0 [ OOo0oOOOO0 ( 'name' ) [ 0 ] . string ] [ 'ignorecache' ] = OOo0oOOOO0 ( 'ignorecache' ) [ 0 ] . string
   except :
    i1IiiII ( "Regex: -- no ignorecache" )
    if 47 - 47: I1 . O000000O - Ii
    if 83 - 83: i11IiI1II . iiIIi1i1Iii - iIII1
    if 2 - 2: iIII1
    if 96 - 96: iiIIi1i1Iii . iIII1 % IiiIIiII . iiIIi1i1Iii
    if 1 - 1: IIoooO0ooO0oo % I1II % i11IiI1II . oOO
  O0OoO0oo0 = urllib . quote ( repr ( O0OoO0oo0 ) )
  return O0OoO0oo0
  if 13 - 13: i11Ii + IiiIIiII % iiI
 except :
  O0OoO0oo0 = None
  i1IiiII ( 'regex Error: ' + IIiiII111i . encode ( 'utf-8' , 'ignore' ) )
  if 14 - 14: IiiIIiII + I1II - iiI - oO0o0
def O00O00OoOoo ( url ) :
 try :
  for OOo0oOOOO0 in range ( 1 , 51 ) :
   OO0oO = o0 ( url )
   if "EXT-X-STREAM-INF" in OO0oO : return url
   if not "EXTM3U" in OO0oO : return
   xbmc . sleep ( 2000 )
  return
 except :
  return
  if 87 - 87: O00O + iiI % II * oO00ooo0o0OO
def ooooo0 ( regexs , url , cookieJar = None , forCookieJarOnly = False , recursiveCall = False , cachedPages = { } , rawPost = False , cookie_jar_file = None ) :
 if not recursiveCall :
  regexs = eval ( urllib . unquote ( regexs ) )
  if 7 - 7: I1III1iI1iiiIiI1 / iiI
  if 6 - 6: I1 / I1II % iIII1 / iiI
 oO0o = re . compile ( '\$doregex\[([^\]]*)\]' ) . findall ( url )
 if 21 - 21: IIoooO0ooO0oo . I1III1iI1iiiIiI1 + I1II
 i111Ii1ii11 = True
 for i1i1II11I in oO0o :
  if i1i1II11I in regexs :
   if 57 - 57: oO00ooo0o0OO . iiI + iiIIi1i1Iii * iIII1 % iIII1 / Ii
   i1i = regexs [ i1i1II11I ]
   if 30 - 30: O000000O * iIII1
   OOOo = False
   if 'cookiejar' in i1i :
    if 46 - 46: I1 * IiiIIiII + iiIIi1i1Iii * iiIi1IiI
    OOOo = i1i [ 'cookiejar' ]
    if '$doregex' in OOOo :
     cookieJar = ooooo0 ( regexs , i1i [ 'cookiejar' ] , cookieJar , True , True , cachedPages )
     if 95 - 95: IIII
     OOOo = True
    else :
     OOOo = True
     if 92 - 92: I1 % iiI * IiiIIiII % II * IIII
   if OOOo :
    if cookieJar == None :
     if 43 - 43: I1II
     cookie_jar_file = None
     if 'open[' in i1i [ 'cookiejar' ] :
      cookie_jar_file = i1i [ 'cookiejar' ] . split ( 'open[' ) [ 1 ] . split ( ']' ) [ 0 ]
      if 78 - 78: iiIi1IiI . iiI - oOO * oO0o0
      if 20 - 20: i11IiI1II - oOO . OOO
     cookieJar = iII1 ( cookie_jar_file )
     if 41 - 41: IIII % I1III1iI1iiiIiI1 % II / OOO % oO00ooo0o0OO / Ii
     if cookie_jar_file :
      iii1i1I ( cookieJar , cookie_jar_file )
      if 77 - 77: iIII1 . iIII1
      if 55 - 55: I1 + i11IiI1II . oO0o0 . I1 - OOO
      if 62 - 62: iIII1 / iIII1 - iiIIi1i1Iii
    elif 'save[' in i1i [ 'cookiejar' ] :
     cookie_jar_file = i1i [ 'cookiejar' ] . split ( 'save[' ) [ 1 ] . split ( ']' ) [ 0 ]
     i1i1 = os . path . join ( I111i11I1I , cookie_jar_file )
     if 9 - 9: IIoooO0ooO0oo * I1II
     iii1i1I ( cookieJar , cookie_jar_file )
   if i1i [ 'page' ] and '$doregex' in i1i [ 'page' ] :
    iiiIii1IiII = ooooo0 ( regexs , i1i [ 'page' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
    if len ( iiiIii1IiII ) == 0 :
     iiiIii1IiII = 'http://regexfailed'
    i1i [ 'page' ] = iiiIii1IiII
    if 83 - 83: OOO
   if 'setcookie' in i1i and i1i [ 'setcookie' ] and '$doregex' in i1i [ 'setcookie' ] :
    i1i [ 'setcookie' ] = ooooo0 ( regexs , i1i [ 'setcookie' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
   if 'appendcookie' in i1i and i1i [ 'appendcookie' ] and '$doregex' in i1i [ 'appendcookie' ] :
    i1i [ 'appendcookie' ] = ooooo0 ( regexs , i1i [ 'appendcookie' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
    if 49 - 49: oOO + iiIIi1i1Iii * iIII1 + I1II
    if 88 - 88: I1III1iI1iiiIiI1 - II + O00O . IiiIIiII % IiiIIiII / iiIi1IiI
   if 'post' in i1i and '$doregex' in i1i [ 'post' ] :
    i1i [ 'post' ] = ooooo0 ( regexs , i1i [ 'post' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
    if 88 - 88: OOO / iiIIi1i1Iii * II
    if 84 - 84: i11Ii * IiiIIiII - oO0o0 . oO00ooo0o0OO + oO0o0
   if 'rawpost' in i1i and '$doregex' in i1i [ 'rawpost' ] :
    i1i [ 'rawpost' ] = ooooo0 ( regexs , i1i [ 'rawpost' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages , rawPost = True )
    if 85 - 85: iiIi1IiI
    if 76 - 76: iiIIi1i1Iii % I1II - I1II
   if 'rawpost' in i1i and '$epoctime$' in i1i [ 'rawpost' ] :
    i1i [ 'rawpost' ] = i1i [ 'rawpost' ] . replace ( '$epoctime$' , o0Ii1I11iIi1I1I ( ) )
    if 30 - 30: I1 % iiIIi1i1Iii - iiIi1IiI
   if 'rawpost' in i1i and '$epoctime2$' in i1i [ 'rawpost' ] :
    i1i [ 'rawpost' ] = i1i [ 'rawpost' ] . replace ( '$epoctime2$' , ii11I1Iiii ( ) )
    if 15 - 15: IiiIIiII . iiIi1IiI + Ii . I1II * IIII . IIoooO0ooO0oo
    if 38 - 38: Ii
   Oo00OO = ''
   if i1i [ 'page' ] and i1i [ 'page' ] in cachedPages and not 'ignorecache' in i1i and forCookieJarOnly == False :
    if 53 - 53: iiI - IIoooO0ooO0oo - II - IIoooO0ooO0oo - OOO % i11Ii
    Oo00OO = cachedPages [ i1i [ 'page' ] ]
   else :
    if i1i [ 'page' ] and not i1i [ 'page' ] == '' and i1i [ 'page' ] . startswith ( 'http' ) :
     if '$epoctime$' in i1i [ 'page' ] :
      i1i [ 'page' ] = i1i [ 'page' ] . replace ( '$epoctime$' , o0Ii1I11iIi1I1I ( ) )
     if '$epoctime2$' in i1i [ 'page' ] :
      i1i [ 'page' ] = i1i [ 'page' ] . replace ( '$epoctime2$' , ii11I1Iiii ( ) )
      if 1 - 1: OOO % IIII - IiiIIiII / IIII / Ii
      if 45 - 45: oOO + O000000O - I1
     IIiII11iii1 = i1i [ 'page' ] . split ( '|' )
     O0oo0 = IIiII11iii1 [ 0 ]
     Ii1IIi = None
     if len ( IIiII11iii1 ) > 1 :
      Ii1IIi = IIiII11iii1 [ 1 ]
      if 41 - 41: I1 . I1III1iI1iiiIiI1
      if 55 - 55: I1II
      if 18 - 18: I1II - i11IiI1II * Ii % I1III1iI1iiiIiI1 . O000000O
      if 27 - 27: Ii / II % IIII % Ii . II % oO00ooo0o0OO
      if 95 - 95: I1III1iI1iiiIiI1 * I1 . oO00ooo0o0OO + O00O
      if 5 - 5: OOO % O00O
      if 83 - 83: O000000O
      if 75 - 75: IIoooO0ooO0oo . IIoooO0ooO0oo + OOO / Ii - iIII1
      if 49 - 49: oOO + O000000O * IIoooO0ooO0oo % oO00ooo0o0OO - i11Ii
      if 6 - 6: O00O + i11IiI1II / iiI / iiI / O00O + i11IiI1II
     iII = urllib2 . ProxyHandler ( urllib2 . getproxies ( ) )
     if 70 - 70: I1
     if 45 - 45: i11IiI1II * I1II
     if 60 - 60: IIoooO0ooO0oo - O000000O + OOO
     i11Iii1iii1IiIi = urllib2 . Request ( O0oo0 )
     if 'proxy' in i1i :
      Ii1I1 = i1i [ 'proxy' ]
      if 63 - 63: iiIIi1i1Iii
      if 65 - 65: oOO % i11Ii - iiIIi1i1Iii
      if O0oo0 [ : 5 ] == "https" :
       ooOoOoOo = urllib2 . ProxyHandler ( { 'https' : Ii1I1 } )
       if 14 - 14: I1II
      else :
       ooOoOoOo = urllib2 . ProxyHandler ( { 'http' : Ii1I1 } )
       if 17 - 17: O00O * i11IiI1II / I1
      iIIi11I11i1 = urllib2 . build_opener ( ooOoOoOo )
      urllib2 . install_opener ( iIIi11I11i1 )
      if 58 - 58: I1 . II - IIII - IIII
      if 10 - 10: oO00ooo0o0OO * I1 - OOO
     i11Iii1iii1IiIi . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows NT 6.1; rv:14.0) Gecko/20100101 Firefox/14.0.1' )
     Ii1I1 = None
     if 15 - 15: oO00ooo0o0OO - IiiIIiII / iiIi1IiI + iiI + oOO * iiI
     if 'referer' in i1i :
      i11Iii1iii1IiIi . add_header ( 'Referer' , i1i [ 'referer' ] )
     if 'accept' in i1i :
      i11Iii1iii1IiIi . add_header ( 'Accept' , i1i [ 'accept' ] )
     if 'agent' in i1i :
      i11Iii1iii1IiIi . add_header ( 'User-agent' , i1i [ 'agent' ] )
     if 'x-req' in i1i :
      i11Iii1iii1IiIi . add_header ( 'X-Requested-With' , i1i [ 'x-req' ] )
     if 'x-addr' in i1i :
      i11Iii1iii1IiIi . add_header ( 'x-addr' , i1i [ 'x-addr' ] )
     if 'x-forward' in i1i :
      i11Iii1iii1IiIi . add_header ( 'X-Forwarded-For' , i1i [ 'x-forward' ] )
     if 'setcookie' in i1i :
      if 48 - 48: O00O - i11IiI1II - i11Ii . iiIIi1i1Iii
      i11Iii1iii1IiIi . add_header ( 'Cookie' , i1i [ 'setcookie' ] )
     if 'appendcookie' in i1i :
      if 51 - 51: oOO . i11IiI1II % i11IiI1II - i11IiI1II
      IIiI11Iii11 = i1i [ 'appendcookie' ]
      IIiI11Iii11 = IIiI11Iii11 . split ( ';' )
      for IIi1I1IIIII in IIiI11Iii11 :
       Ooo0o0ooO , ii1iI111iIi1 = IIi1I1IIIII . split ( '=' )
       O0o000o0Oo , Ooo0o0ooO = Ooo0o0ooO . split ( ':' )
       OooO00OOo0OOO = cookielib . Cookie ( version = 0 , name = Ooo0o0ooO , value = ii1iI111iIi1 , port = None , port_specified = False , domain = O0o000o0Oo , domain_specified = False , domain_initial_dot = False , path = '/' , path_specified = True , secure = False , expires = None , discard = True , comment = None , comment_url = None , rest = { 'HttpOnly' : None } , rfc2109 = False )
       cookieJar . set_cookie ( OooO00OOo0OOO )
     if 'origin' in i1i :
      i11Iii1iii1IiIi . add_header ( 'Origin' , i1i [ 'origin' ] )
     if Ii1IIi :
      Ii1IIi = Ii1IIi . split ( '&' )
      for IIi1I1IIIII in Ii1IIi :
       if IIi1I1IIIII . split ( '=' ) == 2 :
        Ooo0o0ooO , ii1iI111iIi1 = IIi1I1IIIII . split ( '=' )
       else :
        O0O = IIi1I1IIIII . split ( '=' )
        Ooo0o0ooO = O0O [ 0 ]
        ii1iI111iIi1 = '=' . join ( O0O [ 1 : ] )
        if 9 - 9: oO0o0 * oOO + O000000O . I1II . IiiIIiII - I1III1iI1iiiIiI1
       i11Iii1iii1IiIi . add_header ( Ooo0o0ooO , ii1iI111iIi1 )
       if 22 - 22: i11IiI1II + I1 - OOO * oOO - IIoooO0ooO0oo
     if not cookieJar == None :
      if 65 - 65: oOO * O000000O + i11IiI1II % OOO
      Ooo0oOO00o0oo = urllib2 . HTTPCookieProcessor ( cookieJar )
      iIIi11I11i1 = urllib2 . build_opener ( Ooo0oOO00o0oo , urllib2 . HTTPBasicAuthHandler ( ) , urllib2 . HTTPHandler ( ) )
      iIIi11I11i1 = urllib2 . install_opener ( iIIi11I11i1 )
      if 24 - 24: oO00ooo0o0OO * oOO
      if 30 - 30: Ii / O000000O / oO0o0 + OOO + I1III1iI1iiiIiI1 / oO0o0
      if 'noredirect' in i1i :
       iIIi11I11i1 = urllib2 . build_opener ( Ooo0oOO00o0oo , ii11iI1i , urllib2 . HTTPBasicAuthHandler ( ) , urllib2 . HTTPHandler ( ) )
       iIIi11I11i1 = urllib2 . install_opener ( iIIi11I11i1 )
     elif 'noredirect' in i1i :
      iIIi11I11i1 = urllib2 . build_opener ( ii11iI1i , urllib2 . HTTPBasicAuthHandler ( ) , urllib2 . HTTPHandler ( ) )
      iIIi11I11i1 = urllib2 . install_opener ( iIIi11I11i1 )
      if 63 - 63: IIII - i11Ii
      if 89 - 89: IIoooO0ooO0oo % iiI % iiIIi1i1Iii + i11IiI1II . I1III1iI1iiiIiI1 % oO0o0
     if 'connection' in i1i :
      if 60 - 60: IIoooO0ooO0oo
      from keepalive import HTTPHandler
      O0OO = HTTPHandler ( )
      iIIi11I11i1 = urllib2 . build_opener ( O0OO )
      urllib2 . install_opener ( iIIi11I11i1 )
      if 67 - 67: OOO - IIoooO0ooO0oo % Ii % IiiIIiII - I1III1iI1iiiIiI1 - IIII
      if 37 - 37: iiIi1IiI / IIoooO0ooO0oo
      if 9 - 9: I1III1iI1iiiIiI1 * iiI - i11IiI1II
     oO00Oo00o = None
     if 62 - 62: oO00ooo0o0OO % OOO * iiIi1IiI % OOO * oO00ooo0o0OO + Ii
     if 'post' in i1i :
      OoOoo = i1i [ 'post' ]
      if 19 - 19: IIoooO0ooO0oo - iIII1 % IIoooO0ooO0oo % I1 . I1III1iI1iiiIiI1 / OOO
      if 84 - 84: oOO / I1 + OOO * iiIIi1i1Iii % oOO + Ii
      if 42 - 42: iiI / II + iiI
      if 74 - 74: I1II . oO00ooo0o0OO
      IiOoo00o0o = OoOoo . split ( ',' ) ;
      oO00Oo00o = { }
      for iIII1I11iIii in IiOoo00o0o :
       Ooo0o0ooO = iIII1I11iIii . split ( ':' ) [ 0 ] ;
       ii1iI111iIi1 = iIII1I11iIii . split ( ':' ) [ 1 ] ;
       oO00Oo00o [ Ooo0o0ooO ] = ii1iI111iIi1
      oO00Oo00o = urllib . urlencode ( oO00Oo00o )
      if 8 - 8: I1 - oOO
     if 'rawpost' in i1i :
      oO00Oo00o = i1i [ 'rawpost' ]
      if 46 - 46: IiiIIiII % I1II % II
      if 86 - 86: iiIi1IiI . oO00ooo0o0OO . O00O
      if 83 - 83: OOO * I1 / iiI * OOO
      if 79 - 79: I1 % oO00ooo0o0OO
     Oo00OO = ''
     try :
      if 56 - 56: i11IiI1II % IiiIIiII . oOO * II - I1II
      if oO00Oo00o :
       ii1I1Iii = urllib2 . urlopen ( i11Iii1iii1IiIi , oO00Oo00o )
      else :
       ii1I1Iii = urllib2 . urlopen ( i11Iii1iii1IiIi )
      if ii1I1Iii . info ( ) . get ( 'Content-Encoding' ) == 'gzip' :
       from StringIO import StringIO
       import gzip
       I11iI = StringIO ( ii1I1Iii . read ( ) )
       oOo0OoOo = gzip . GzipFile ( fileobj = I11iI )
       Oo00OO = oOo0OoOo . read ( )
      else :
       Oo00OO = ii1I1Iii . read ( )
       if 63 - 63: i11IiI1II + I1 % O000000O
       if 82 - 82: II - iIII1 / iiI / II . I1II
       if 75 - 75: I1III1iI1iiiIiI1
      if 'proxy' in i1i and not iII is None :
       urllib2 . install_opener ( urllib2 . build_opener ( iII ) )
       if 83 - 83: OOO + iiIi1IiI
      Oo00OO = Iiii ( Oo00OO )
      if 92 - 92: oOO
      if 39 - 39: O00O - II / IIII * oOO / O000000O - Ii
      if 'includeheaders' in i1i :
       if 84 - 84: i11Ii + iiIIi1i1Iii
       Oo00OO += '$$HEADERS_START$$:'
       for I1iII11ii1iii in ii1I1Iii . headers :
        Oo00OO += I1iII11ii1iii + ':' + ii1I1Iii . headers . get ( I1iII11ii1iii ) + '\n'
       Oo00OO += '$$HEADERS_END$$:'
       if 30 - 30: iIII1 + OOO * I1III1iI1iiiIiI1 / iIII1
      i1IiiII ( Oo00OO )
      i1IiiII ( cookieJar )
      if 58 - 58: iiI
      ii1I1Iii . close ( )
     except :
      pass
     cachedPages [ i1i [ 'page' ] ] = Oo00OO
     if 53 - 53: iiIIi1i1Iii * iIII1
     if 98 - 98: I1III1iI1iiiIiI1 / oOO / Ii + I1 / i11Ii % iiI
     if 41 - 41: IIoooO0ooO0oo . i11IiI1II
     if forCookieJarOnly :
      return cookieJar
    elif i1i [ 'page' ] and not i1i [ 'page' ] . startswith ( 'http' ) :
     if i1i [ 'page' ] . startswith ( '$pyFunction:' ) :
      O0oOoO0 = OoOo0OO0o ( i1i [ 'page' ] . split ( '$pyFunction:' ) [ 1 ] , '' , cookieJar , i1i )
      if forCookieJarOnly :
       return cookieJar
      Oo00OO = O0oOoO0
      Oo00OO = Iiii ( Oo00OO )
     else :
      Oo00OO = i1i [ 'page' ]
   if '$pyFunction:playmedia(' in i1i [ 'expres' ] or 'ActivateWindow' in i1i [ 'expres' ] or 'RunPlugin' in i1i [ 'expres' ] or '$PLAYERPROXY$=' in url or any ( x in url for x in OOo0O ) :
    i111Ii1ii11 = False
   if '$doregex' in i1i [ 'expres' ] :
    i1i [ 'expres' ] = ooooo0 ( regexs , i1i [ 'expres' ] , cookieJar , recursiveCall = True , cachedPages = cachedPages )
    if 43 - 43: II + i11IiI1II . I1II . O000000O - II
   if not i1i [ 'expres' ] == '' :
    if 16 - 16: i11IiI1II * iIII1 / IIoooO0ooO0oo + IIII + iiIi1IiI
    if '$LiveStreamCaptcha' in i1i [ 'expres' ] :
     O0oOoO0 = oOoi1IIi1ii11 ( i1i , Oo00OO , cookieJar )
     if 26 - 26: oO0o0 . iIII1 . II % OOO
     url = url . replace ( "$doregex[" + i1i1II11I + "]" , O0oOoO0 )
     if 18 - 18: i11Ii - I1
    elif i1i [ 'expres' ] . startswith ( '$pyFunction:' ) or '#$pyFunction' in i1i [ 'expres' ] :
     if 77 - 77: i11IiI1II . I1II . O000000O
     O0oOoO0 = ''
     if i1i [ 'expres' ] . startswith ( '$pyFunction:' ) :
      O0oOoO0 = OoOo0OO0o ( i1i [ 'expres' ] . split ( '$pyFunction:' ) [ 1 ] , Oo00OO , cookieJar , i1i )
     else :
      O0oOoO0 = oOo00 ( i1i [ 'expres' ] , Oo00OO , cookieJar , i1i )
     if 'ActivateWindow' in i1i [ 'expres' ] or 'RunPlugin' in i1i [ 'expres' ] : return '' , False
     if forCookieJarOnly :
      return cookieJar
     if 'listrepeat' in i1i :
      Oo0o00O0oo000 = i1i [ 'listrepeat' ]
      if 34 - 34: iiIi1IiI . iiI * IIoooO0ooO0oo
      if 60 - 60: I1II % oO0o0 * IiiIIiII % O000000O
      return Oo0o00O0oo000 , eval ( O0oOoO0 ) , i1i , regexs , cookieJar
      if 85 - 85: O00O % OOO
      if 87 - 87: IIoooO0ooO0oo * IIII * I1III1iI1iiiIiI1 * O00O - oO00ooo0o0OO + IiiIIiII
      if 43 - 43: oO0o0 % Ii % oOO / I1II . I1III1iI1iiiIiI1
     try :
      url = url . replace ( u"$doregex[" + i1i1II11I + "]" , O0oOoO0 )
     except : url = url . replace ( "$doregex[" + i1i1II11I + "]" , O0oOoO0 . decode ( "utf-8" ) )
    else :
     if 'listrepeat' in i1i :
      Oo0o00O0oo000 = i1i [ 'listrepeat' ]
      if 84 - 84: i11Ii + IIoooO0ooO0oo + oO0o0
      if 8 - 8: IiiIIiII * I1 * O00O / oOO + IIoooO0ooO0oo
      if 17 - 17: oOO
      if 48 - 48: iiIIi1i1Iii - I1II
      iI11 = re . findall ( i1i [ 'expres' ] , Oo00OO )
      if 6 - 6: IIII - Ii
      return Oo0o00O0oo000 , iI11 , i1i , regexs , cookieJar
      if 4 - 4: I1II - I1III1iI1iiiIiI1 - iiIi1IiI - IiiIIiII % IIoooO0ooO0oo
     O0oOoO0 = ''
     if not Oo00OO == '' :
      if 38 - 38: oO0o0 % IIoooO0ooO0oo . II . i11IiI1II - iiIi1IiI / oO0o0
      oOOOOoooO = re . compile ( i1i [ 'expres' ] ) . search ( Oo00OO )
      try :
       O0oOoO0 = oOOOOoooO . group ( 1 ) . strip ( )
      except : traceback . print_exc ( )
     elif i1i [ 'page' ] == '' or i1i [ 'page' ] == None :
      O0oOoO0 = i1i [ 'expres' ]
      if 33 - 33: oOO
     if rawPost :
      if 67 - 67: IiiIIiII . Ii / I1
      O0oOoO0 = urllib . quote_plus ( O0oOoO0 )
     if 'htmlunescape' in i1i :
      if 4 - 4: II / O000000O - I1III1iI1iiiIiI1 + IIII
      import HTMLParser
      O0oOoO0 = HTMLParser . HTMLParser ( ) . unescape ( O0oOoO0 )
     try :
      url = url . replace ( "$doregex[" + i1i1II11I + "]" , O0oOoO0 )
     except : url = url . replace ( "$doregex[" + i1i1II11I + "]" , O0oOoO0 . decode ( "utf-8" ) )
     if 73 - 73: oOO * i11Ii
     if 25 - 25: O00O - II . iiI / iIII1
   else :
    url = url . replace ( "$doregex[" + i1i1II11I + "]" , '' )
 if '$epoctime$' in url :
  url = url . replace ( '$epoctime$' , o0Ii1I11iIi1I1I ( ) )
 if '$epoctime2$' in url :
  url = url . replace ( '$epoctime2$' , ii11I1Iiii ( ) )
  if 19 - 19: I1II * iiI . iiI
 if '$GUID$' in url :
  import uuid
  url = url . replace ( '$GUID$' , str ( uuid . uuid1 ( ) ) . upper ( ) )
 if '$get_cookies$' in url :
  url = url . replace ( '$get_cookies$' , oooOo0Ooo0 ( cookieJar ) )
  if 50 - 50: O000000O + oO0o0 % i11Ii * oO00ooo0o0OO % IIoooO0ooO0oo
 if recursiveCall : return url
 if 33 - 33: II - I1II + i11Ii
 if url == "" :
  return
 else :
  return url , i111Ii1ii11
def oOoooOoo000 ( t ) :
 import hashlib
 IIi1I1IIIII = hashlib . md5 ( )
 IIi1I1IIIII . update ( t )
 return IIi1I1IIIII . hexdigest ( )
 if 9 - 9: oO00ooo0o0OO % oO00ooo0o0OO + oOO + oOO
def iiIIiiIIIiI1 ( encrypted ) :
 O0OoO0Oo0OO = ""
 if 63 - 63: i11IiI1II % iiI
 if 62 - 62: I1
 if 85 - 85: Ii . iiIIi1i1Iii . I1II
 if 50 - 50: iiI * I1 + I1III1iI1iiiIiI1 % OOO + IiiIIiII
 if 22 - 22: oOO * I1II
def I1iiIi ( media_url ) :
 try :
  import CustomPlayer
  I1i1iiIi1ii1 = CustomPlayer . MyXBMCPlayer ( )
  I1iIi1111i1I = xbmcgui . ListItem ( label = str ( IIiiII111i ) , iconImage = "DefaultVideo.png" , thumbnailImage = xbmc . getInfoImage ( "ListItem.Thumb" ) , path = media_url )
  I1i1iiIi1ii1 . play ( media_url , I1iIi1111i1I )
  xbmc . sleep ( 1000 )
  while I1i1iiIi1ii1 . is_active :
   xbmc . sleep ( 200 )
 except :
  traceback . print_exc ( )
 return ''
 if 38 - 38: IIoooO0ooO0oo / OOO / oO00ooo0o0OO / IiiIIiII - Ii
def I1i ( params ) :
 o0OoO0o = json . dumps ( params )
 Iiii1II11II11 = xbmc . executeJSONRPC ( o0OoO0o )
 if 90 - 90: iiI % oO0o0 / oOO * II % oOO * oO00ooo0o0OO
 try :
  ii1I1Iii = json . loads ( Iiii1II11II11 )
 except UnicodeDecodeError :
  ii1I1Iii = json . loads ( Iiii1II11II11 . decode ( 'utf-8' , 'ignore' ) )
  if 1 - 1: oO0o0 + IIoooO0ooO0oo - OOO
 try :
  if 'result' in ii1I1Iii :
   return ii1I1Iii [ 'result' ]
  return None
 except KeyError :
  logger . warn ( "[%s] %s" % ( params [ 'method' ] , ii1I1Iii [ 'error' ] [ 'message' ] ) )
  return None
  if 9 - 9: iiIi1IiI + iiIIi1i1Iii . II + iIII1 * oO00ooo0o0OO
  if 43 - 43: i11Ii - IIoooO0ooO0oo . oO00ooo0o0OO . iIII1 + oOO + I1
def O000o ( proxysettings = None ) :
 if 26 - 26: i11IiI1II / i11Ii
 if proxysettings == None :
  if 65 - 65: iIII1 * IiiIIiII % iiI
  xbmc . executeJSONRPC ( '{"jsonrpc":"2.0", "method":"Settings.SetSettingValue", "params":{"setting":"network.usehttpproxy", "value":false}, "id":1}' )
 else :
  if 95 - 95: iIII1
  ii11Ii1i1Ii = proxysettings . split ( ':' )
  i1iI = ii11Ii1i1Ii [ 0 ]
  II1IiiII = ii11Ii1i1Ii [ 1 ]
  O00o = ii11Ii1i1Ii [ 2 ]
  iiiI11I1I1111 = None
  O0Oo = None
  if 15 - 15: OOO / IiiIIiII * O00O
  if len ( ii11Ii1i1Ii ) > 3 and '@' in ii11Ii1i1Ii [ 3 ] :
   iiiI11I1I1111 = ii11Ii1i1Ii [ 3 ] . split ( '@' ) [ 0 ]
   O0Oo = ii11Ii1i1Ii [ 3 ] . split ( '@' ) [ 1 ]
   if 26 - 26: i11Ii + OOO
   if 39 - 39: oOO % oO00ooo0o0OO + i11Ii
  xbmc . executeJSONRPC ( '{"jsonrpc":"2.0", "method":"Settings.SetSettingValue", "params":{"setting":"network.usehttpproxy", "value":true}, "id":1}' )
  xbmc . executeJSONRPC ( '{"jsonrpc":"2.0", "method":"Settings.SetSettingValue", "params":{"setting":"network.httpproxytype", "value":' + str ( O00o ) + '}, "id":1}' )
  xbmc . executeJSONRPC ( '{"jsonrpc":"2.0", "method":"Settings.SetSettingValue", "params":{"setting":"network.httpproxyserver", "value":"' + str ( i1iI ) + '"}, "id":1}' )
  xbmc . executeJSONRPC ( '{"jsonrpc":"2.0", "method":"Settings.SetSettingValue", "params":{"setting":"network.httpproxyport", "value":' + str ( II1IiiII ) + '}, "id":1}' )
  if 2 - 2: oO00ooo0o0OO * oOO
  if 33 - 33: oOO
  if not iiiI11I1I1111 == None :
   xbmc . executeJSONRPC ( '{"jsonrpc":"2.0", "method":"Settings.SetSettingValue", "params":{"setting":"network.httpproxyusername", "value":"' + str ( iiiI11I1I1111 ) + '"}, "id":1}' )
   xbmc . executeJSONRPC ( '{"jsonrpc":"2.0", "method":"Settings.SetSettingValue", "params":{"setting":"network.httpproxypassword", "value":"' + str ( O0Oo ) + '"}, "id":1}' )
   if 50 - 50: oOO * O000000O * IIII * O000000O * O00O
   if 24 - 24: Ii . i11IiI1II + I1 * I1III1iI1iiiIiI1 * IIoooO0ooO0oo / I1
def O0OoOooO ( ) :
 O0o000Oo0O = I1i ( { 'jsonrpc' : '2.0' , "method" : "Settings.GetSettingValue" , "params" : { "setting" : "network.usehttpproxy" } , 'id' : 1 } ) [ 'value' ]
 if 20 - 20: Ii + i11Ii % II
 O00o = I1i ( { 'jsonrpc' : '2.0' , "method" : "Settings.GetSettingValue" , "params" : { "setting" : "network.httpproxytype" } , 'id' : 1 } ) [ 'value' ]
 if 7 - 7: i11Ii / oO00ooo0o0OO % Ii / oOO . i11IiI1II
 if O0o000Oo0O :
  i1iI = I1i ( { 'jsonrpc' : '2.0' , "method" : "Settings.GetSettingValue" , "params" : { "setting" : "network.httpproxyserver" } , 'id' : 1 } ) [ 'value' ]
  II1IiiII = unicode ( I1i ( { 'jsonrpc' : '2.0' , "method" : "Settings.GetSettingValue" , "params" : { "setting" : "network.httpproxyport" } , 'id' : 1 } ) [ 'value' ] )
  iiiI11I1I1111 = I1i ( { 'jsonrpc' : '2.0' , "method" : "Settings.GetSettingValue" , "params" : { "setting" : "network.httpproxyusername" } , 'id' : 1 } ) [ 'value' ]
  O0Oo = I1i ( { 'jsonrpc' : '2.0' , "method" : "Settings.GetSettingValue" , "params" : { "setting" : "network.httpproxypassword" } , 'id' : 1 } ) [ 'value' ]
  if 73 - 73: i11IiI1II * oOO + I1 * I1II * I1III1iI1iiiIiI1 % oOO
  if iiiI11I1I1111 and O0Oo and i1iI and II1IiiII :
   return i1iI + ':' + str ( II1IiiII ) + ':' + str ( O00o ) + ':' + iiiI11I1I1111 + '@' + O0Oo
  elif i1iI and II1IiiII :
   return i1iI + ':' + str ( II1IiiII ) + ':' + str ( O00o )
 else :
  return None
  if 37 - 37: O00O / i11IiI1II . oO00ooo0o0OO . I1
def ii11 ( media_url , name , iconImage , proxyip , port , proxyuser = None , proxypass = None ) :
 if 86 - 86: oO0o0
 if media_url == None or media_url == '' :
  xbmc . executebuiltin ( "XBMC.Notification(Catoal,Unable to play empty Url,5000," + O00O000 + ")" )
  return
 OoO00oo0oo = xbmcgui . DialogProgress ( )
 OoO00oo0oo . create ( 'Progress' , 'Playing with custom proxy' )
 OoO00oo0oo . update ( 10 , "" , "setting proxy.." , "" )
 II11I1 = False
 IIIIi1IiI = ''
 if 82 - 82: iiI % oO0o0
 try :
  if 4 - 4: iiIi1IiI - iiIi1IiI
  IIIIi1IiI = O0OoOooO ( )
  print 'existing_proxy' , IIIIi1IiI
  if 1 - 1: oO00ooo0o0OO - II * oOO + II % I1II
  if 43 - 43: I1II . oO0o0 % Ii / IiiIIiII / oO0o0
  if not proxyuser == None :
   O000o ( proxyip + ':' + port + ':0:' + proxyuser + '@' + proxypass )
  else :
   O000o ( proxyip + ':' + port + ':0' )
   if 66 - 66: i11IiI1II
  print 'proxy setting complete playing' , media_url
  II11I1 = True
  OoO00oo0oo . update ( 80 , "" , "setting proxy complete, now playing" , "" )
  if 66 - 66: iiIi1IiI . OOO - oO00ooo0o0OO
  if 42 - 42: O000000O + iiI / IiiIIiII * IIoooO0ooO0oo - i11IiI1II . iiIi1IiI
  import CustomPlayer
  I1i1iiIi1ii1 = CustomPlayer . MyXBMCPlayer ( )
  I1i1iiIi1ii1 . pdialogue == OoO00oo0oo
  I1iIi1111i1I = xbmcgui . ListItem ( label = str ( name ) , iconImage = iconImage , thumbnailImage = xbmc . getInfoImage ( "ListItem.Thumb" ) , path = media_url )
  I1i1iiIi1ii1 . play ( media_url , I1iIi1111i1I )
  xbmc . sleep ( 1000 )
  if 83 - 83: IIoooO0ooO0oo . iiIi1IiI - II / IiiIIiII . I1II - oOO
  if 18 - 18: IIoooO0ooO0oo % oOO . iiI . iiIIi1i1Iii / I1II
  import time
  ii1I1iIiI = time . time ( )
  try :
   while I1i1iiIi1ii1 . is_active :
    xbmc . sleep ( 1000 )
    if I1i1iiIi1ii1 . urlplayed == False and time . time ( ) - ii1I1iIiI > 12 :
     print 'failed!!!'
     xbmc . executebuiltin ( "XBMC.Notification(Catoal,Unable to play check proxy,5000," + O00O000 + ")" )
     break
     if 19 - 19: I1
  except : pass
  if 50 - 50: oO0o0 % I1 - iiIIi1i1Iii / i11IiI1II * II
  OoO00oo0oo . close ( )
  OoO00oo0oo = None
 except :
  traceback . print_exc ( )
 if OoO00oo0oo :
  OoO00oo0oo . close ( )
 if II11I1 :
  print 'now resetting the proxy back'
  O000o ( IIIIi1IiI )
  print 'reset here'
 return ''
 if 37 - 37: oO00ooo0o0OO % iIII1 - IIoooO0ooO0oo * O00O . iiIIi1i1Iii % iiI
 if 73 - 73: iIII1 * O00O + IIII * iiIIi1i1Iii % oOO
def i1 ( page_value , referer = None ) :
 if referer :
  referer = [ ( 'Referer' , referer ) ]
 if page_value . startswith ( "http" ) :
  I1I1iIIiII1 = page_value
  page_value = o0 ( page_value , headers = referer )
  if 76 - 76: II . i11IiI1II - i11IiI1II % O000000O
 iI1II1iII = "(eval\(function\(p,a,c,k,e,(?:r|d).*)"
 if 38 - 38: I1 + O000000O + I1II
 Iiii1i1II1 = re . compile ( iI1II1iII ) . findall ( page_value )
 iI1IiI = ""
 if Iiii1i1II1 and len ( Iiii1i1II1 ) > 0 :
  for ii1iI111iIi1 in Iiii1i1II1 :
   i11Ii11i = OOooO0O00o0o0 ( ii1iI111iIi1 )
   ooOooo = oO0 ( i11Ii11i , '\'(.*?)\'' )
   if 'unescape' in i11Ii11i :
    i11Ii11i = urllib . unquote ( ooOooo )
   iI1IiI += i11Ii11i + '\n'
   if 53 - 53: I1II
   if 26 - 26: i11Ii / I1III1iI1iiiIiI1 + I1II / Ii * oO00ooo0o0OO
  I1I1iIIiII1 = oO0 ( iI1IiI , 'src="(.*?)"' )
  if 12 - 12: IiiIIiII / I1III1iI1iiiIiI1 - oO00ooo0o0OO * IIoooO0ooO0oo
  page_value = o0 ( I1I1iIIiII1 , headers = referer )
  if 60 - 60: oOO * i11IiI1II . IiiIIiII + I1III1iI1iiiIiI1 % IIII % i11Ii
  if 10 - 10: I1II * oO0o0 . i11Ii
  if 86 - 86: O00O + IIoooO0ooO0oo % i11Ii
 Iiii11iIi1I1 = oO0 ( page_value , 'streamer\'.*?\'(.*?)\'\)' )
 oooO0iI1I = oO0 ( page_value , 'file\',\s\'(.*?)\'' )
 if 87 - 87: IIII . oO0o0 - IIII - O000000O
 if 18 - 18: IIoooO0ooO0oo + oO0o0 % O000000O
 return Iiii11iIi1I1 + ' playpath=' + oooO0iI1I + ' pageUrl=' + I1I1iIIiII1
 if 46 - 46: Ii
def i11 ( page_value , referer = None ) :
 if referer :
  referer = [ ( 'Referer' , referer ) ]
 if page_value . startswith ( "http" ) :
  page_value = o0 ( page_value , headers = referer )
 iI1II1iII = "var a = (.*?);\s*var b = (.*?);\s*var c = (.*?);\s*var d = (.*?);\s*var f = (.*?);\s*var v_part = '(.*?)';"
 Iiii1i1II1 = re . compile ( iI1II1iII ) . findall ( page_value ) [ 0 ]
 if 89 - 89: O000000O * I1III1iI1iiiIiI1 - Ii % i11IiI1II * i11IiI1II + O000000O
 Oooo0 , I1iII11ii1iii , Iii1IiiI , i1i1I1ii1i , oOo0OoOo , ii1iI111iIi1 = ( Iiii1i1II1 )
 oOo0OoOo = int ( oOo0OoOo )
 Oooo0 = int ( Oooo0 ) / oOo0OoOo
 I1iII11ii1iii = int ( I1iII11ii1iii ) / oOo0OoOo
 Iii1IiiI = int ( Iii1IiiI ) / oOo0OoOo
 i1i1I1ii1i = int ( i1i1I1ii1i ) / oOo0OoOo
 if 2 - 2: i11Ii * iIII1 + oO0o0 - oO00ooo0o0OO + oO00ooo0o0OO / O000000O
 iI11 = 'rtmp://' + str ( Oooo0 ) + '.' + str ( I1iII11ii1iii ) + '.' + str ( Iii1IiiI ) + '.' + str ( i1i1I1ii1i ) + ii1iI111iIi1 ;
 return iI11
 if 96 - 96: II . i11Ii - i11Ii + I1III1iI1iiiIiI1 % Ii * O000000O
def o0OoO00ooOo ( url , useragent = None ) :
 IIIIIIi1I = '#EXTM3U'
 IIIIIIi1I += '\n#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=361816'
 IIIIIIi1I += '\n' + url + '&bytes=0-200000'
 iIi11iI1ii1I = os . path . join ( I111i11I1I , 'testfile.m3u' )
 IIIIIIi1I += '\n'
 o0OoO ( iIi11iI1ii1I , IIIIIIi1I )
 if 21 - 21: I1II - II
 return iIi11iI1ii1I
 if 86 - 86: IiiIIiII / iiIi1IiI
def o0OoO ( file_name , page_data , append = False ) :
 if append :
  oOo0OoOo = open ( file_name , 'a' )
  oOo0OoOo . write ( page_data )
  oOo0OoOo . close ( )
 else :
  oOo0OoOo = open ( file_name , 'wb' )
  oOo0OoOo . write ( page_data )
  oOo0OoOo . close ( )
  return ''
  if 81 - 81: iiIIi1i1Iii / OOO - IIoooO0ooO0oo . O000000O . IiiIIiII / iiIIi1i1Iii
def iI1i ( file_name ) :
 oOo0OoOo = open ( file_name , 'rb' )
 i1i1I1ii1i = oOo0OoOo . read ( )
 oOo0OoOo . close ( )
 return i1i1I1ii1i
 if 19 - 19: oO0o0 - O00O
def OOOO0OOo ( page_data ) :
 import re , base64 , urllib ;
 Ii1II1IiI = page_data
 while 'geh(' in Ii1II1IiI :
  if Ii1II1IiI . startswith ( 'lol(' ) : Ii1II1IiI = Ii1II1IiI [ 5 : - 1 ]
  if 75 - 75: IIII * i11Ii * IIoooO0ooO0oo / OOO - II
  Ii1II1IiI = re . compile ( '"(.*?)"' ) . findall ( Ii1II1IiI ) [ 0 ] ;
  Ii1II1IiI = base64 . b64decode ( Ii1II1IiI ) ;
  Ii1II1IiI = urllib . unquote ( Ii1II1IiI ) ;
 print Ii1II1IiI
 return Ii1II1IiI
 if 81 - 81: I1II - i11Ii - II / oO0o0 - O00O
def I1111iiIiII ( page_data ) :
 if 99 - 99: O00O - I1II % O000000O * I1III1iI1iiiIiI1 * oO0o0
 OOOoo0OOooOO0 = o0 ( page_data ) ;
 i1Ii11II = '(http.*)'
 import uuid
 ooOOoo0OOoo0 = str ( uuid . uuid1 ( ) ) . upper ( )
 iiiIII = re . compile ( i1Ii11II ) . findall ( OOOoo0OOooOO0 )
 I1iIIi = [ ( 'X-Playback-Session-Id' , ooOOoo0OOoo0 ) ]
 for oOi1IiI1iII1iii in iiiIII :
  try :
   I11iiiI1IiI = o0 ( oOi1IiI1iII1iii , headers = I1iIIi ) ;
   if 51 - 51: I1 + I1III1iI1iiiIiI1 + II + iiI % I1III1iI1iiiIiI1
  except : pass
  if 67 - 67: i11IiI1II / iiI / oO00ooo0o0OO
 return page_data + '|&X-Playback-Session-Id=' + ooOOoo0OOoo0
 if 89 - 89: II - oO0o0 . II + IIII * I1II
 if 50 - 50: IiiIIiII * I1III1iI1iiiIiI1 % iiIi1IiI * I1III1iI1iiiIiI1
def oo0ooo0OOOOo ( page_data ) :
 if 41 - 41: IIII + i11IiI1II * i11IiI1II . i11Ii * OOO
 if page_data . startswith ( 'http://dag.total-stream.net' ) :
  I1iIIi = [ ( 'User-Agent' , 'Verismo-BlackUI_(2.4.7.5.8.0.34)' ) ]
  page_data = o0 ( page_data , headers = I1iIIi ) ;
  if 10 - 10: oO00ooo0o0OO % iiIi1IiI
 if '127.0.0.1' in page_data :
  return oo0o0O0oO0O ( page_data )
 elif oO0 ( page_data , 'wmsAuthSign%3D([^%&]+)' ) != '' :
  IIiI11ii = oO0 ( page_data , '&ver_t=([^&]+)&' ) + '?wmsAuthSign=' + oO0 ( page_data , 'wmsAuthSign%3D([^%&]+)' ) + '==/mp4:' + oO0 ( page_data , '\\?y=([^&]+)&' )
 else :
  IIiI11ii = oO0 ( page_data , 'href="([^"]+)"[^"]+$' )
  if len ( IIiI11ii ) == 0 :
   IIiI11ii = page_data
 IIiI11ii = IIiI11ii . replace ( ' ' , '%20' )
 return IIiI11ii
 if 46 - 46: I1 * iiI + iiIIi1i1Iii - IiiIIiII * Ii - I1II
def oO0 ( data , re_patten ) :
 oOOo = ''
 i1i = re . search ( re_patten , data )
 if i1i != None :
  oOOo = i1i . group ( 1 )
 else :
  oOOo = ''
 return oOOo
 if 16 - 16: II - i11Ii % I1III1iI1iiiIiI1
def oo0o0O0oO0O ( page_data ) :
 IIiI11ii = ''
 if '127.0.0.1' in page_data :
  IIiI11ii = oO0 ( page_data , '&ver_t=([^&]+)&' ) + ' live=true timeout=15 playpath=' + oO0 ( page_data , '\\?y=([a-zA-Z0-9-_\\.@]+)' )
  if 38 - 38: I1II + OOO + O000000O - oOO % iiI - i11IiI1II
 if oO0 ( page_data , 'token=([^&]+)&' ) != '' :
  IIiI11ii = IIiI11ii + '?token=' + oO0 ( page_data , 'token=([^&]+)&' )
 elif oO0 ( page_data , 'wmsAuthSign%3D([^%&]+)' ) != '' :
  IIiI11ii = oO0 ( page_data , '&ver_t=([^&]+)&' ) + '?wmsAuthSign=' + oO0 ( page_data , 'wmsAuthSign%3D([^%&]+)' ) + '==/mp4:' + oO0 ( page_data , '\\?y=([^&]+)&' )
 else :
  IIiI11ii = oO0 ( page_data , 'HREF="([^"]+)"' )
  if 22 - 22: O00O
 if 'dag1.asx' in IIiI11ii :
  return oo0ooo0OOOOo ( IIiI11ii )
  if 88 - 88: iiI % IiiIIiII
 if 'devinlivefs.fplive.net' not in IIiI11ii :
  IIiI11ii = IIiI11ii . replace ( 'devinlive' , 'flive' )
 if 'permlivefs.fplive.net' not in IIiI11ii :
  IIiI11ii = IIiI11ii . replace ( 'permlive' , 'flive' )
 return IIiI11ii
 if 23 - 23: II / i11IiI1II
 if 72 - 72: I1II . iiIi1IiI % OOO + I1II / iiI + iiI
def II11iII111111 ( str_eval ) :
 iiOOOoO0o0 = ""
 try :
  i1I11iIii = "w,i,s,e=(" + str_eval + ')'
  exec ( i1I11iIii )
  iiOOOoO0o0 = IIIi11iIiII11 ( w , OOo0oOOOO0 , Ii1II1IiI , e )
 except : traceback . print_exc ( file = sys . stdout )
 if 70 - 70: I1 + IiiIIiII + I1 - Ii + I1III1iI1iiiIiI1 * Ii
 return iiOOOoO0o0
 if 36 - 36: I1III1iI1iiiIiI1 % IIoooO0ooO0oo - II
def IIIi11iIiII11 ( w , i , s , e ) :
 I1i1I1iI1IiI = 0 ;
 o00oO0OOoO = 0 ;
 i1I111iIi1i1i = 0 ;
 oOo00OoO0o = [ ] ;
 I1i11iIIi1I1i = [ ] ;
 while True :
  if ( I1i1I1iI1IiI < 5 ) :
   I1i11iIIi1I1i . append ( w [ I1i1I1iI1IiI ] )
  elif ( I1i1I1iI1IiI < len ( w ) ) :
   oOo00OoO0o . append ( w [ I1i1I1iI1IiI ] ) ;
  I1i1I1iI1IiI += 1 ;
  if ( o00oO0OOoO < 5 ) :
   I1i11iIIi1I1i . append ( i [ o00oO0OOoO ] )
  elif ( o00oO0OOoO < len ( i ) ) :
   oOo00OoO0o . append ( i [ o00oO0OOoO ] )
  o00oO0OOoO += 1 ;
  if ( i1I111iIi1i1i < 5 ) :
   I1i11iIIi1I1i . append ( s [ i1I111iIi1i1i ] )
  elif ( i1I111iIi1i1i < len ( s ) ) :
   oOo00OoO0o . append ( s [ i1I111iIi1i1i ] ) ;
  i1I111iIi1i1i += 1 ;
  if ( len ( w ) + len ( i ) + len ( s ) + len ( e ) == len ( oOo00OoO0o ) + len ( I1i11iIIi1I1i ) + len ( e ) ) :
   break ;
   if 32 - 32: iIII1 * oOO + iiIIi1i1Iii
 oOOoOO = '' . join ( oOo00OoO0o )
 iiIiiI = '' . join ( I1i11iIIi1I1i )
 o00oO0OOoO = 0 ;
 IIIi1i1i = [ ] ;
 for I1i1I1iI1IiI in range ( 0 , len ( oOo00OoO0o ) , 2 ) :
  if 1 - 1: II
  iiIIiii1i1 = - 1 ;
  if ( ord ( iiIiiI [ o00oO0OOoO ] ) % 2 ) :
   iiIIiii1i1 = 1 ;
   if 33 - 33: OOO / O000000O + OOO - I1II
  IIIi1i1i . append ( chr ( int ( oOOoOO [ I1i1I1iI1IiI : I1i1I1iI1IiI + 2 ] , 36 ) - iiIIiii1i1 ) ) ;
  o00oO0OOoO += 1 ;
  if ( o00oO0OOoO >= len ( I1i11iIIi1I1i ) ) :
   o00oO0OOoO = 0 ;
 iI11 = '' . join ( IIIi1i1i )
 if 'eval(function(w,i,s,e)' in iI11 :
  if 74 - 74: iiI * I1II / IiiIIiII * I1
  iI11 = re . compile ( 'eval\(function\(w,i,s,e\).*}\((.*?)\)' ) . findall ( iI11 ) [ 0 ]
  return II11iII111111 ( iI11 )
 else :
  if 59 - 59: i11IiI1II * IIII
  return iI11
  if 62 - 62: oO0o0 / OOO . iiIIi1i1Iii * IIII . Ii
def OOooO0O00o0o0 ( page_value , regex_for_text = '' , iterations = 1 , total_iteration = 1 ) :
 try :
  i1iiII11Ii1Ii = None
  if page_value . startswith ( "http" ) :
   page_value = o0 ( page_value )
   if 39 - 39: IIoooO0ooO0oo / iiIi1IiI - IiiIIiII - Ii / I1II
  if regex_for_text and len ( regex_for_text ) > 0 :
   try :
    page_value = re . compile ( regex_for_text ) . findall ( page_value ) [ 0 ]
   except : return 'NOTPACKED'
   if 100 - 100: IiiIIiII % O000000O
  page_value = o0O0OOO0 ( page_value , iterations , total_iteration )
 except :
  page_value = 'UNPACKEDFAILED'
  traceback . print_exc ( file = sys . stdout )
  if 51 - 51: OOO / iiIi1IiI
 if 'sav1live.tv' in page_value :
  page_value = page_value . replace ( 'sav1live.tv' , 'sawlive.tv' )
  if 40 - 40: iiI * IIII * O00O
 return page_value
 if 11 - 11: oOO + oOO * IIII . iiIi1IiI
def o0O0OOO0 ( sJavascript , iteration = 1 , totaliterations = 2 ) :
 if 92 - 92: IiiIIiII * O000000O - O00O
 if sJavascript . startswith ( 'var _0xcb8a=' ) :
  I1IIiiii = sJavascript . split ( 'var _0xcb8a=' )
  i1I11iIii = "myarray=" + I1IIiiii [ 1 ] . split ( "eval(" ) [ 0 ]
  exec ( i1I11iIii )
  OOo00 = 62
  O0OiI1 = int ( I1IIiiii [ 1 ] . split ( ",62," ) [ 1 ] . split ( ',' ) [ 0 ] )
  IIOoo000O00o0O = myarray [ 0 ]
  o00o0oo0Ooo0 = myarray [ 3 ]
  with open ( 'temp file' + str ( iteration ) + '.js' , "wb" ) as i11IiiiiI11i11III :
   i11IiiiiI11i11III . write ( str ( o00o0oo0Ooo0 ) )
   if 25 - 25: oO00ooo0o0OO . iiIi1IiI + II
 else :
  if 93 - 93: I1III1iI1iiiIiI1 % II + iiI % iiI % oO00ooo0o0OO
  if "rn p}('" in sJavascript :
   I1IIiiii = sJavascript . split ( "rn p}('" )
  else :
   I1IIiiii = sJavascript . split ( "rn A}('" )
   if 16 - 16: Ii + iiIi1IiI . O000000O
   if 66 - 66: i11Ii % IIII
  IIOoo000O00o0O , OOo00 , O0OiI1 , o00o0oo0Ooo0 = ( '' , '0' , '0' , '' )
  if 16 - 16: iiIi1IiI / oO00ooo0o0OO * IIoooO0ooO0oo - iiIi1IiI
  i1I11iIii = "p1,a1,c1,k1=('" + I1IIiiii [ 1 ] . split ( ".spli" ) [ 0 ] + ')'
  exec ( i1I11iIii )
 o00o0oo0Ooo0 = o00o0oo0Ooo0 . split ( '|' )
 I1IIiiii = I1IIiiii [ 1 ] . split ( "))'" )
 if 20 - 20: IiiIIiII % O000000O - iiIIi1i1Iii / iiI + I1II % iiIIi1i1Iii
 if 94 - 94: I1II
 if 78 - 78: i11Ii . iiI / iIII1
 if 54 - 54: OOO % oOO . II % O000000O % I1III1iI1iiiIiI1 - oO00ooo0o0OO
 if 23 - 23: iiI + I1II % I1II % I1II
 if 3 - 3: IIoooO0ooO0oo * OOO
 if 12 - 12: oO0o0 + i11Ii % O000000O / oO0o0 + II
 if 62 - 62: Ii + i11IiI1II * iiIi1IiI . IIoooO0ooO0oo * IiiIIiII % OOO
 if 39 - 39: Ii + O00O
 if 3 - 3: O000000O
 if 67 - 67: IiiIIiII - oOO / I1III1iI1iiiIiI1 . i11IiI1II
 if 84 - 84: I1
 if 78 - 78: OOO / oO0o0 / O00O
 if 83 - 83: iiI / iiIi1IiI / I1 % IiiIIiII . iiIIi1i1Iii
 if 85 - 85: iiIi1IiI % oOO * iiIIi1i1Iii
 if 61 - 61: OOO . iiI + oO00ooo0o0OO % iiI / iiIIi1i1Iii % Ii
 if 43 - 43: IiiIIiII % IIII / I1II - O000000O
 if 66 - 66: oOO
 if 50 - 50: O00O
 if 42 - 42: oO0o0 . Ii . oO00ooo0o0OO - IIoooO0ooO0oo
 if 3 - 3: IiiIIiII / iIII1 + IIII . iiIi1IiI
 if 7 - 7: Ii
 i1Ii1II = ''
 i1i1I1ii1i = ''
 if 52 - 52: iiIi1IiI - iiI / Ii . i11IiI1II
 if 27 - 27: O000000O / I1II + I1 - I1III1iI1iiiIiI1 / oO0o0 * iiIIi1i1Iii
 iiiiIIi1 = str ( Ii1iIIi ( IIOoo000O00o0O , OOo00 , O0OiI1 , o00o0oo0Ooo0 , i1Ii1II , i1i1I1ii1i , iteration ) )
 if 6 - 6: I1II % OOO * iiIi1IiI . Ii / OOO - OOO
 if 23 - 23: i11IiI1II % i11Ii + i11Ii
 if 48 - 48: oO0o0 + oOO % O000000O * II - OOO
 if 10 - 10: I1III1iI1iiiIiI1 / I1III1iI1iiiIiI1 - oO00ooo0o0OO + Ii % II + i11IiI1II
 if 96 - 96: oO0o0 % IiiIIiII - I1 . iiIi1IiI
 if iteration >= totaliterations :
  if 12 - 12: IIII % I1 + Ii * iiIi1IiI / oO00ooo0o0OO - I1II
  return iiiiIIi1
 else :
  if 32 - 32: O000000O - II
  return o0O0OOO0 ( iiiiIIi1 , iteration + 1 )
  if 6 - 6: IIII % I1II / iiIi1IiI * iiIi1IiI
def Ii1iIIi ( p , a , c , k , e , d , iteration , v = 1 ) :
 if 2 - 2: Ii
 if 88 - 88: oO0o0 * iiI % OOO
 if 83 - 83: I1 / iIII1 + oOO * O000000O % I1
 while ( c >= 1 ) :
  c = c - 1
  if ( k [ c ] ) :
   III1IIiII11 = str ( iI1Ii1III111I ( c , a ) )
   if v == 1 :
    p = re . sub ( '\\b' + III1IIiII11 + '\\b' , k [ c ] , p )
   else :
    p = OOOo0oO ( p , III1IIiII11 , k [ c ] )
    if 11 - 11: oO00ooo0o0OO . O000000O * iiI
    if 81 - 81: OOO . II * oOO
    if 90 - 90: i11IiI1II . i11Ii
    if 100 - 100: i11IiI1II + IiiIIiII * i11Ii + I1III1iI1iiiIiI1
    if 94 - 94: iiIi1IiI . iiI + oO0o0
    if 23 - 23: IIoooO0ooO0oo
 return p
 if 90 - 90: iiI * I1III1iI1iiiIiI1 . IiiIIiII
 if 18 - 18: IiiIIiII / I1
 if 94 - 94: OOO - OOO % iiI - I1 + oO00ooo0o0OO
def OOOo0oO ( source_str , word_to_find , replace_with ) :
 iiII1i1 = None
 iiII1i1 = source_str . split ( word_to_find )
 if len ( iiII1i1 ) > 1 :
  IIi = [ ]
  i1IIiI = 0
  for OoooOOOoOo in iiII1i1 :
   if 52 - 52: i11IiI1II % O000000O + IIoooO0ooO0oo
   IIi . append ( OoooOOOoOo )
   O0oOoO0 = word_to_find
   if 41 - 41: oOO
   if 60 - 60: iiIi1IiI + iIII1 + Ii + iiIi1IiI
   if i1IIiI == len ( iiII1i1 ) - 1 :
    O0oOoO0 = ''
   else :
    if len ( OoooOOOoOo ) == 0 :
     if ( len ( iiII1i1 [ i1IIiI + 1 ] ) == 0 and word_to_find [ 0 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) or ( len ( iiII1i1 [ i1IIiI + 1 ] ) > 0 and iiII1i1 [ i1IIiI + 1 ] [ 0 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) :
      O0oOoO0 = replace_with
      if 71 - 71: I1II * O000000O * iiIi1IiI + I1II / IIII % I1III1iI1iiiIiI1
    else :
     if ( iiII1i1 [ i1IIiI ] [ - 1 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) and ( ( len ( iiII1i1 [ i1IIiI + 1 ] ) == 0 and word_to_find [ 0 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) or ( len ( iiII1i1 [ i1IIiI + 1 ] ) > 0 and iiII1i1 [ i1IIiI + 1 ] [ 0 ] . lower ( ) not in 'abcdefghijklmnopqrstuvwxyz1234567890_' ) ) :
      O0oOoO0 = replace_with
      if 44 - 44: IiiIIiII - I1III1iI1iiiIiI1 % IIII . IIoooO0ooO0oo
   IIi . append ( O0oOoO0 )
   i1IIiI += 1
   if 45 - 45: I1
  source_str = '' . join ( IIi )
 return source_str
 if 90 - 90: oO0o0 % i11IiI1II / I1II . iiI * I1II * oO00ooo0o0OO
def O0oOOoOOOo0 ( num , radix ) :
 if 25 - 25: oO0o0
 OO0oO = ""
 if num == 0 : return '0'
 while num > 0 :
  OO0oO = "0123456789abcdefghijklmnopqrstuvwxyz" [ num % radix ] + OO0oO
  num /= radix
 return OO0oO
 if 53 - 53: iiI / i11IiI1II / oO00ooo0o0OO / oO00ooo0o0OO
def iI1Ii1III111I ( cc , a ) :
 III1IIiII11 = "" if cc < a else iI1Ii1III111I ( int ( cc / a ) , a )
 cc = ( cc % a )
 oo00Oo0 = chr ( cc + 29 ) if cc > 35 else str ( O0oOOoOOOo0 ( cc , 36 ) )
 return III1IIiII11 + oo00Oo0
 if 72 - 72: iiIi1IiI
 if 90 - 90: oO0o0 - I1 * iiIi1IiI . O00O / OOO
def oooOo0Ooo0 ( cookieJar ) :
 try :
  O00Ooo00ooOoo = ""
  for II11Ii , ooi11i1I1iII in enumerate ( cookieJar ) :
   O00Ooo00ooOoo += ooi11i1I1iII . name + "=" + ooi11i1I1iII . value + ";"
 except : pass
 if 91 - 91: I1II . oO00ooo0o0OO + O00O * I1II . Ii
 return O00Ooo00ooOoo
 if 83 - 83: iIII1 . I1II
 if 2 - 2: IIII - OOO - i11Ii
def iii1i1I ( cookieJar , COOKIEFILE ) :
 try :
  i1i1 = os . path . join ( I111i11I1I , COOKIEFILE )
  cookieJar . save ( i1i1 , ignore_discard = True )
 except : pass
 if 99 - 99: I1II . oO0o0 / iiI
def iII1 ( COOKIEFILE ) :
 if 100 - 100: I1III1iI1iiiIiI1 / IIoooO0ooO0oo + oOO . i11IiI1II . I1II + Ii
 iIii1 = None
 if COOKIEFILE :
  try :
   i1i1 = os . path . join ( I111i11I1I , COOKIEFILE )
   iIii1 = cookielib . LWPCookieJar ( )
   iIii1 . load ( i1i1 , ignore_discard = True )
  except :
   iIii1 = None
   if 24 - 24: i11Ii - iiIIi1i1Iii * Ii - iiIi1IiI / I1II / i11IiI1II
 if not iIii1 :
  iIii1 = cookielib . LWPCookieJar ( )
  if 63 - 63: i11Ii . I1 . O00O * O000000O / iIII1
 return iIii1
 if 94 - 94: IiiIIiII
def OoOo0OO0o ( fun_call , page_data , Cookie_Jar , m ) :
 i1i11iIIi1 = ''
 if 28 - 28: IiiIIiII
 if OOoOO not in sys . path :
  sys . path . append ( OOoOO )
  if 67 - 67: i11Ii / I1II % I1III1iI1iiiIiI1 - iIII1 . oO00ooo0o0OO . I1III1iI1iiiIiI1
  if 12 - 12: iIII1 + I1III1iI1iiiIiI1 + I1III1iI1iiiIiI1 % iiI + I1
 try :
  II11i111111II = 'import ' + fun_call . split ( '.' ) [ 0 ]
  if 62 - 62: i11Ii - i11Ii / iiI / iiIi1IiI - OOO
  exec ( II11i111111II )
  if 97 - 97: I1 % oOO % oO0o0 . i11IiI1II
 except :
  if 77 - 77: II - O00O + OOO * oOO
  traceback . print_exc ( file = sys . stdout )
  if 48 - 48: iiI / OOO - I1III1iI1iiiIiI1
 exec ( 'ret_val=' + fun_call )
 if 13 - 13: I1III1iI1iiiIiI1 * oOO + oO0o0 % iiIIi1i1Iii
 if 85 - 85: iIII1 + I1III1iI1iiiIiI1
 try :
  return str ( i1i11iIIi1 )
 except : return i1i11iIIi1
 if 46 - 46: iiIIi1i1Iii / i11IiI1II + IiiIIiII * O000000O % O00O
def oOo00 ( fun_call , page_data , Cookie_Jar , m ) :
 if 8 - 8: iiIi1IiI
 i1i11iIIi1 = ''
 if OOoOO not in sys . path :
  sys . path . append ( OOoOO )
  if 10 - 10: oO00ooo0o0OO / IiiIIiII
 oOo0OoOo = open ( os . path . join ( OOoOO , 'LSProdynamicCode.py' ) , "wb" )
 oOo0OoOo . write ( "# -*- coding: utf-8 -*-\n" )
 oOo0OoOo . write ( fun_call . encode ( "utf-8" ) ) ;
 if 68 - 68: OOO % i11IiI1II - oO00ooo0o0OO + Ii + iiIIi1i1Iii
 oOo0OoOo . close ( )
 import LSProdynamicCode
 i1i11iIIi1 = LSProdynamicCode . GetLSProData ( page_data , Cookie_Jar , m )
 try :
  return str ( i1i11iIIi1 )
 except : return i1i11iIIi1
 if 78 - 78: IIoooO0ooO0oo * I1 * II / iiIIi1i1Iii / I1
 if 84 - 84: IiiIIiII / IiiIIiII * O00O + OOO . IiiIIiII
def oOooo00oO0Oo ( captchakey , cj , type = 1 ) :
 if 85 - 85: iiI % oO0o0 % oO0o0 * OOO + I1III1iI1iiiIiI1
 if 89 - 89: I1 * oOO . iiI . oOO
 if 43 - 43: O00O * iIII1 * IIII . O000000O . Ii
 Ii11I1 = ""
 Ii1II1IiII1I1 = ""
 if 21 - 21: i11Ii * i11Ii
 if 54 - 54: O00O / O000000O . O00O . I1II % I1III1iI1iiiIiI1 - I1II
 if 56 - 56: I1III1iI1iiiIiI1 * iiIIi1i1Iii + iiIi1IiI + OOO / Ii
 if 90 - 90: OOO % I1II % OOO
 if 71 - 71: i11IiI1II . oO00ooo0o0OO . IIII . IIII + iiIIi1i1Iii % II
 O0Oo0oo000 = False
 OoOO0o = None
 Ii1II1IiII1I1 = None
 if len ( captchakey ) > 0 :
  OO0Oooo0o0O = captchakey
  if not OO0Oooo0o0O . startswith ( 'http' ) :
   OO0Oooo0o0O = 'http://www.google.com/recaptcha/api/challenge?k=' + OO0Oooo0o0O + '&ajax=1'
   if 36 - 36: O00O % iIII1 / iiIi1IiI * IiiIIiII % O000000O . I1
  O0Oo0oo000 = True
  if 81 - 81: iiIi1IiI / IIII % I1III1iI1iiiIiI1 . i11IiI1II * I1III1iI1iiiIiI1
  iiIIiI11IiI1I = 'challenge.*?\'(.*?)\''
  O000000o = '\'(.*?)\''
  OOoO00o = o0 ( OO0Oooo0o0O , cookieJar = cj )
  Ii11I1 = re . findall ( iiIIiI11IiI1I , OOoO00o ) [ 0 ]
  oOO0o0OOO = 'http://www.google.com/recaptcha/api/reload?c=' ;
  oOoooO = OO0Oooo0o0O . split ( 'k=' ) [ 1 ]
  oOO0o0OOO += Ii11I1 + '&k=' + oOoooO + '&reason=i&type=image&lang=en'
  Ooo00 = o0 ( oOO0o0OOO , cookieJar = cj )
  OoOO0o = re . findall ( O000000o , Ooo00 ) [ 0 ]
  III111i = 'http://www.google.com/recaptcha/api/image?c=' + OoOO0o
  if not III111i . startswith ( "http" ) :
   III111i = 'http://www.google.com/recaptcha/api/' + III111i
  import random
  Ooo0o0ooO = random . randrange ( 100 , 1000 , 5 )
  O0Oi1i = os . path . join ( I111i11I1I , str ( Ooo0o0ooO ) + "captcha.img" )
  i1III11i = open ( O0Oi1i , "wb" )
  i1III11i . write ( o0 ( III111i , cookieJar = cj ) )
  i1III11i . close ( )
  Oo00oOoo00oO = IiiIII11iI1ii ( captcha = O0Oi1i )
  Ii1II1IiII1I1 = Oo00oOoo00oO . get ( )
  os . remove ( O0Oi1i )
  if 23 - 23: oOO * O000000O % i11IiI1II + OOO . IiiIIiII * iiI
 if OoOO0o :
  if type == 1 :
   return 'recaptcha_challenge_field=' + urllib . quote_plus ( OoOO0o ) + '&recaptcha_response_field=' + urllib . quote_plus ( Ii1II1IiII1I1 )
  elif type == 2 :
   return 'recaptcha_challenge_field:' + OoOO0o + ',recaptcha_response_field:' + Ii1II1IiII1I1
  else :
   return 'recaptcha_challenge_field=' + urllib . quote_plus ( OoOO0o ) + '&recaptcha_response_field=' + urllib . quote_plus ( Ii1II1IiII1I1 )
 else :
  return ''
  if 51 - 51: O00O * oOO
  if 9 - 9: iiIIi1i1Iii
def o0 ( url , cookieJar = None , post = None , timeout = 20 , headers = None , noredir = False ) :
 if 75 - 75: iiIi1IiI % I1II % IiiIIiII
 if 43 - 43: iiIi1IiI % iIII1 / IIII % O00O / OOO - oO0o0
 Ooo0oOO00o0oo = urllib2 . HTTPCookieProcessor ( cookieJar )
 if 45 - 45: i11IiI1II * O00O
 if noredir :
  iIIi11I11i1 = urllib2 . build_opener ( ii11iI1i , Ooo0oOO00o0oo , urllib2 . HTTPBasicAuthHandler ( ) , urllib2 . HTTPHandler ( ) )
 else :
  iIIi11I11i1 = urllib2 . build_opener ( Ooo0oOO00o0oo , urllib2 . HTTPBasicAuthHandler ( ) , urllib2 . HTTPHandler ( ) )
  if 49 - 49: iiIi1IiI * IIII . i11Ii * IIoooO0ooO0oo
 i11Iii1iii1IiIi = urllib2 . Request ( url )
 i11Iii1iii1IiIi . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/33.0.1750.154 Safari/537.36' )
 if headers :
  for IIi1I1IIIII , OoO00000Ooo in headers :
   i11Iii1iii1IiIi . add_header ( IIi1I1IIIII , OoO00000Ooo )
   if 74 - 74: I1II / iiIIi1i1Iii - iiIIi1i1Iii / IIII
 ii1I1Iii = iIIi11I11i1 . open ( i11Iii1iii1IiIi , post , timeout = timeout )
 Oo00OO = ii1I1Iii . read ( )
 ii1I1Iii . close ( )
 return Oo00OO ;
 if 80 - 80: oOO + O00O . I1III1iI1iiiIiI1 - iiI
def OOOOO0 ( str , reg = None ) :
 if reg :
  str = re . findall ( reg , str ) [ 0 ]
 oO0oI1I1i11 = urllib . unquote ( str [ 0 : len ( str ) - 1 ] ) ;
 OOoO = '' ;
 for OOo0oOOOO0 in range ( len ( oO0oI1I1i11 ) ) :
  OOoO += chr ( ord ( oO0oI1I1i11 [ OOo0oOOOO0 ] ) - oO0oI1I1i11 [ len ( oO0oI1I1i11 ) - 1 ] ) ;
 OOoO = urllib . unquote ( OOoO )
 if 7 - 7: oO0o0
 return OOoO
 if 16 - 16: IIII / IIoooO0ooO0oo . I1II % O000000O
def Iiii ( str ) :
 IIiiI111iiIIi = re . findall ( 'unescape\(\'(.*?)\'' , str )
 if 96 - 96: iiI - IIoooO0ooO0oo / iiIi1IiI
 if ( not IIiiI111iiIIi == None ) and len ( IIiiI111iiIIi ) > 0 :
  for oOo0o0 in IIiiI111iiIIi :
   if 74 - 74: IiiIIiII
   str = str . replace ( oOo0o0 , urllib . unquote ( oOo0o0 ) )
 return str
 if 45 - 45: I1II % II . OOO
o0Oo00 = 0
def oOoi1IIi1ii11 ( m , html_page , cookieJar ) :
 global o0Oo00
 o0Oo00 += 1
 iiIIII = m [ 'expres' ]
 I1I1iIIiII1 = m [ 'page' ]
 iIi11ii1i = re . compile ( '\$LiveStreamCaptcha\[([^\]]*)\]' ) . findall ( iiIIII ) [ 0 ]
 if 45 - 45: I1II - Ii / O000000O - i11IiI1II - i11IiI1II + i11IiI1II
 OO0Oooo0o0O = re . compile ( iIi11ii1i ) . findall ( html_page ) [ 0 ]
 if 64 - 64: OOO / i11IiI1II / iIII1 / iiIIi1i1Iii + IIoooO0ooO0oo
 if not OO0Oooo0o0O . startswith ( "http" ) :
  oo0O = 'http://' + "" . join ( I1I1iIIiII1 . split ( '/' ) [ 2 : 3 ] )
  if OO0Oooo0o0O . startswith ( "/" ) :
   OO0Oooo0o0O = oo0O + OO0Oooo0o0O
  else :
   OO0Oooo0o0O = oo0O + '/' + OO0Oooo0o0O
   if 46 - 46: oO00ooo0o0OO / i11IiI1II . oOO - O000000O
 O0Oi1i = os . path . join ( I111i11I1I , str ( o0Oo00 ) + "captcha.jpg" )
 i1III11i = open ( O0Oi1i , "wb" )
 if 17 - 17: IiiIIiII - I1II % Ii . iiI + OOO
 i11Iii1iii1IiIi = urllib2 . Request ( OO0Oooo0o0O )
 i11Iii1iii1IiIi . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows NT 6.1; rv:14.0) Gecko/20100101 Firefox/14.0.1' )
 if 'referer' in m :
  i11Iii1iii1IiIi . add_header ( 'Referer' , m [ 'referer' ] )
 if 'agent' in m :
  i11Iii1iii1IiIi . add_header ( 'User-agent' , m [ 'agent' ] )
 if 'setcookie' in m :
  if 35 - 35: i11IiI1II * iiIIi1i1Iii + OOO
  i11Iii1iii1IiIi . add_header ( 'Cookie' , m [ 'setcookie' ] )
  if 82 - 82: Ii . IiiIIiII
  if 18 - 18: iIII1 / O000000O . oO0o0
  if 94 - 94: oO0o0 - IIoooO0ooO0oo / i11IiI1II . i11Ii / OOO . oOO
  if 6 - 6: IIoooO0ooO0oo
 urllib2 . urlopen ( i11Iii1iii1IiIi )
 ii1I1Iii = urllib2 . urlopen ( i11Iii1iii1IiIi )
 if 75 - 75: Ii / II . IiiIIiII / I1II
 i1III11i . write ( ii1I1Iii . read ( ) )
 ii1I1Iii . close ( )
 i1III11i . close ( )
 Oo00oOoo00oO = IiiIII11iI1ii ( captcha = O0Oi1i )
 Ii1II1IiII1I1 = Oo00oOoo00oO . get ( )
 return Ii1II1IiII1I1
 if 60 - 60: IIII
def OO000O ( imageregex , html_page , cookieJar , m ) :
 global o0Oo00
 o0Oo00 += 1
 if 77 - 77: IIoooO0ooO0oo * Ii % iiI - oOO - II
 if 26 - 26: oO00ooo0o0OO % oO00ooo0o0OO
 if not imageregex == '' :
  if html_page . startswith ( "http" ) :
   oo0O = o0 ( html_page , cookieJar = cookieJar )
  else :
   oo0O = html_page
  OO0Oooo0o0O = re . compile ( imageregex ) . findall ( html_page ) [ 0 ]
 else :
  OO0Oooo0o0O = html_page
  if 'oneplay.tv/embed' in html_page :
   import oneplay
   oo0O = o0 ( html_page , cookieJar = cookieJar )
   OO0Oooo0o0O = oneplay . getCaptchaUrl ( oo0O )
   if 41 - 41: i11Ii / OOO + I1 - II / i11Ii
 O0Oi1i = os . path . join ( I111i11I1I , str ( o0Oo00 ) + "captcha.jpg" )
 i1III11i = open ( O0Oi1i , "wb" )
 if 24 - 24: O00O % iiI - OOO * iiIIi1i1Iii
 i11Iii1iii1IiIi = urllib2 . Request ( OO0Oooo0o0O )
 i11Iii1iii1IiIi . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows NT 6.1; rv:14.0) Gecko/20100101 Firefox/14.0.1' )
 if 'referer' in m :
  i11Iii1iii1IiIi . add_header ( 'Referer' , m [ 'referer' ] )
 if 'agent' in m :
  i11Iii1iii1IiIi . add_header ( 'User-agent' , m [ 'agent' ] )
 if 'accept' in m :
  i11Iii1iii1IiIi . add_header ( 'Accept' , m [ 'accept' ] )
 if 'setcookie' in m :
  if 67 - 67: iiI . O00O / I1 % Ii % i11Ii
  i11Iii1iii1IiIi . add_header ( 'Cookie' , m [ 'setcookie' ] )
  if 14 - 14: Ii / oOO % I1II - OOO
  if 82 - 82: O00O / i11IiI1II
  if 45 - 45: OOO . IiiIIiII + oOO - oO00ooo0o0OO - IIII
  if 31 - 31: IiiIIiII % IIoooO0ooO0oo + O00O
  if 32 - 32: iiIIi1i1Iii
 ii1I1Iii = urllib2 . urlopen ( i11Iii1iii1IiIi )
 if 10 - 10: oOO / I1 . i11Ii
 i1III11i . write ( ii1I1Iii . read ( ) )
 ii1I1Iii . close ( )
 i1III11i . close ( )
 Oo00oOoo00oO = IiiIII11iI1ii ( captcha = O0Oi1i )
 Ii1II1IiII1I1 = Oo00oOoo00oO . get ( )
 return Ii1II1IiII1I1
 if 4 - 4: IIII - iiIi1IiI . oO00ooo0o0OO
 if 45 - 45: iiI . I1II - IIII
 if 24 - 24: oO00ooo0o0OO
 if 10 - 10: oO0o0 + i11Ii * iiIIi1i1Iii - I1II / oO00ooo0o0OO / OOO
 if 63 - 63: i11Ii - iIII1 / oO0o0 . iiIi1IiI + iiI
 if 31 - 31: iiI * O00O * i11Ii . I1 - iIII1
 if 89 - 89: iiI / oOO - iiI * iiIi1IiI
 if 95 - 95: II
 if 18 - 18: oO0o0 * i11IiI1II - oOO
 if 88 - 88: Ii + i11IiI1II - oO00ooo0o0OO + II % iiIi1IiI
 if 39 - 39: II - IIoooO0ooO0oo % Ii + iiIIi1i1Iii / Ii . iiIIi1i1Iii
 if 13 - 13: IIoooO0ooO0oo
 if 57 - 57: i11IiI1II / i11IiI1II / IiiIIiII + IiiIIiII . i11Ii . iiIIi1i1Iii
def IIi1I1I111 ( name , headname ) :
 if 78 - 78: IIII * OOO + IIII * i11Ii
 if 32 - 32: IIoooO0ooO0oo . I1II
 iIii1Iii1Ii = xbmc . Keyboard ( 'default' , 'heading' , True )
 iIii1Iii1Ii . setDefault ( name )
 iIii1Iii1Ii . setHeading ( headname )
 iIii1Iii1Ii . setHiddenInput ( False )
 return iIii1Iii1Ii . getText ( )
 if 77 - 77: i11Ii + oOO - i11IiI1II - IIII % iiI / I1
 if 8 - 8: IiiIIiII + O000000O
 if 46 - 46: iIII1 - I1III1iI1iiiIiI1 / Ii
 if 48 - 48: I1III1iI1iiiIiI1 * O000000O - O00O + oO0o0
class IiiIII11iI1ii ( xbmcgui . WindowDialog ) :
 def __init__ ( self , * args , ** kwargs ) :
  self . cptloc = kwargs . get ( 'captcha' )
  self . img = xbmcgui . ControlImage ( 335 , 30 , 624 , 60 , self . cptloc )
  self . addControl ( self . img )
  self . kbd = xbmc . Keyboard ( )
  if 48 - 48: iiIi1IiI + i11Ii * iiIIi1i1Iii % I1III1iI1iiiIiI1 - oOO - OOO
 def get ( self ) :
  self . show ( )
  time . sleep ( 2 )
  self . kbd . doModal ( )
  if ( self . kbd . isConfirmed ( ) ) :
   OOOOooo0o0 = self . kbd . getText ( )
   self . close ( )
   return OOOOooo0o0
  self . close ( )
  return False
  if 57 - 57: iIII1 / iiI . I1III1iI1iiiIiI1 . i11IiI1II
def o0Ii1I11iIi1I1I ( ) :
 import time
 return str ( int ( time . time ( ) * 1000 ) )
 if 13 - 13: oO0o0
def ii11I1Iiii ( ) :
 import time
 return str ( int ( time . time ( ) ) )
 if 97 - 97: iiIIi1i1Iii / IiiIIiII
def o0oO00OO0O0 ( ) :
 i11iI1I1II = [ ]
 ooOO0O00oo0oo = sys . argv [ 2 ]
 if len ( ooOO0O00oo0oo ) >= 2 :
  Oo = sys . argv [ 2 ]
  ii111iI = Oo . replace ( '?' , '' )
  if ( Oo [ len ( Oo ) - 1 ] == '/' ) :
   Oo = Oo [ 0 : len ( Oo ) - 2 ]
  IIiI1 = ii111iI . split ( '&' )
  i11iI1I1II = { }
  for OOo0oOOOO0 in range ( len ( IIiI1 ) ) :
   IIIiIII11ii = { }
   IIIiIII11ii = IIiI1 [ OOo0oOOOO0 ] . split ( '=' )
   if ( len ( IIIiIII11ii ) ) == 2 :
    i11iI1I1II [ IIIiIII11ii [ 0 ] ] = IIIiIII11ii [ 1 ]
 return i11iI1I1II
 if 86 - 86: oO0o0 * Ii
 if 25 - 25: I1 + Ii % IiiIIiII * oO00ooo0o0OO + OOO
def IiiII1i1iI ( ) :
 items = json . loads ( open ( o0O0oO0 ) . read ( ) )
 OOOi1 = len ( items )
 for OOo0oOOOO0 in items :
  IIiiII111i = OOo0oOOOO0 [ 0 ]
  ooOoOO00OOoo0 = OOo0oOOOO0 [ 1 ]
  II1iI = OOo0oOOOO0 [ 2 ]
  try :
   Ii1I1i1iII = OOo0oOOOO0 [ 3 ]
   if Ii1I1i1iII == None :
    raise
  except :
   if Ooo . getSetting ( 'use_thumb' ) == "true" :
    Ii1I1i1iII = II1iI
   else :
    Ii1I1i1iII = ooo0ooOoO0Oo
  try : OoO000 = OOo0oOOOO0 [ 5 ]
  except : OoO000 = None
  try : O0OoO0oo0 = OOo0oOOOO0 [ 6 ]
  except : O0OoO0oo0 = None
  if 9 - 9: iiI . iiIi1IiI
  if OOo0oOOOO0 [ 4 ] == 0 :
   ii ( ooOoOO00OOoo0 , IIiiII111i , II1iI , Ii1I1i1iII , '' , '' , '' , 'fav' , OoO000 , O0OoO0oo0 , OOOi1 )
  else :
   oo0OOO0O ( IIiiII111i , ooOoOO00OOoo0 , OOo0oOOOO0 [ 4 ] , II1iI , ooo0ooOoO0Oo , '' , '' , '' , '' , 'fav' )
   if 92 - 92: O00O . oO0o0 - O000000O
   if 64 - 64: i11IiI1II % oO0o0 / O00O * oO0o0 + O000000O
def i1i1I111IiI ( name , url , iconimage , fanart , mode , playlist = None , regexs = None ) :
 ii1I1I = [ ]
 try :
  if 25 - 25: I1 * OOO % i11Ii . i11Ii
  name = name . encode ( 'utf-8' , 'ignore' )
 except :
  pass
 if os . path . exists ( o0O0oO0 ) == False :
  i1IiiII ( 'Making Favorites File' )
  ii1I1I . append ( ( name , url , iconimage , fanart , mode , playlist , regexs ) )
  Oooo0 = open ( o0O0oO0 , "w" )
  Oooo0 . write ( json . dumps ( ii1I1I ) )
  Oooo0 . close ( )
 else :
  i1IiiII ( 'Appending Favorites' )
  Oooo0 = open ( o0O0oO0 ) . read ( )
  o0OoO0o = json . loads ( Oooo0 )
  o0OoO0o . append ( ( name , url , iconimage , fanart , mode ) )
  I1iII11ii1iii = open ( o0O0oO0 , "w" )
  I1iII11ii1iii . write ( json . dumps ( o0OoO0o ) )
  I1iII11ii1iii . close ( )
  if 87 - 87: i11Ii . I1III1iI1iiiIiI1 / I1II
  if 55 - 55: OOO
def I1iiI1i11II ( name ) :
 o0OoO0o = json . loads ( open ( o0O0oO0 ) . read ( ) )
 for II11Ii in range ( len ( o0OoO0o ) ) :
  if o0OoO0o [ II11Ii ] [ 0 ] == name :
   del o0OoO0o [ II11Ii ]
   I1iII11ii1iii = open ( o0O0oO0 , "w" )
   I1iII11ii1iii . write ( json . dumps ( o0OoO0o ) )
   I1iII11ii1iii . close ( )
   break
 xbmc . executebuiltin ( "XBMC.Container.Refresh" )
 if 30 - 30: I1III1iI1iiiIiI1 + i11Ii
def I1I ( url ) :
 import urlresolver
 I11ii1IiIiIi = urlresolver . HostedMediaFile ( url )
 if I11ii1IiIiIi :
  iIiI = urlresolver . resolve ( url )
  i111 = iIiI
  if isinstance ( i111 , list ) :
   for i1i1II11I in i111 :
    Ii1iIiIiiiIi1 = Ooo . getSetting ( 'quality' )
    if i1i1II11I [ 'quality' ] == 'HD' :
     iIiI = i1i1II11I [ 'url' ]
     break
    elif i1i1II11I [ 'quality' ] == 'SD' :
     iIiI = i1i1II11I [ 'url' ]
    elif i1i1II11I [ 'quality' ] == '1080p' and Ooo . getSetting ( '1080pquality' ) == 'true' :
     iIiI = i1i1II11I [ 'url' ]
     break
  else :
   iIiI = i111
 else :
  xbmc . executebuiltin ( "XBMC.Notification(Catoal,Urlresolver donot support this domain. - ,5000)" )
  iIiI = url
 return iIiI
def o0OoO0 ( url , listitem , pdialogue = None ) :
 if 59 - 59: I1
 if url . lower ( ) . startswith ( 'plugin' ) and 'youtube' not in url . lower ( ) :
  print 'playing via runplugin'
  xbmc . executebuiltin ( 'XBMC.RunPlugin(' + url + ')' )
  for OOo0oOOOO0 in range ( 8 ) :
   xbmc . sleep ( 500 )
   try :
    if 19 - 19: II
    if xbmc . getCondVisibility ( "Player.HasMedia" ) and xbmc . Player ( ) . isPlaying ( ) :
     return True
   except : pass
  print 'returning now'
  return False
 import CustomPlayer , time
 if 50 - 50: iiIIi1i1Iii * iIII1 . Ii / oO00ooo0o0OO + i11IiI1II - oO0o0
 I1i1iiIi1ii1 = CustomPlayer . MyXBMCPlayer ( )
 I1i1iiIi1ii1 . pdialogue = pdialogue
 I1I1 = time . time ( )
 if 18 - 18: II . IiiIIiII % I1III1iI1iiiIiI1 + I1 / iiIi1IiI
 print 'going to play'
 import time
 ii1I1iIiI = time . time ( )
 I1i1iiIi1ii1 . play ( url , listitem )
 xbmc . sleep ( 1000 )
 if 80 - 80: Ii . oOO - O00O - IIoooO0ooO0oo . II * iiI
 try :
  while I1i1iiIi1ii1 . is_active :
   xbmc . sleep ( 400 )
   if 8 - 8: oO00ooo0o0OO
   if I1i1iiIi1ii1 . urlplayed :
    print 'yes played'
    return True
   if time . time ( ) - ii1I1iIiI > 4 : return False
   if 85 - 85: II . IiiIIiII * I1II - i11IiI1II % i11Ii * IIoooO0ooO0oo
 except : pass
 print 'not played' , url
 return False
def Oo0O00O0 ( name , mu_playlist , queueVideo = None ) :
 OoO000 = xbmc . PlayList ( xbmc . PLAYLIST_VIDEO )
 if 53 - 53: i11IiI1II . IiiIIiII % II / iiIi1IiI
 if '$$LSPlayOnlyOne$$' in mu_playlist [ 0 ] :
  mu_playlist [ 0 ] = mu_playlist [ 0 ] . replace ( '$$LSPlayOnlyOne$$' , '' )
  import urlparse
  oOOOooo = [ ]
  IIIII = 0
  OoO00oo0oo = xbmcgui . DialogProgress ( )
  OoO00oo0oo . create ( 'Progress' , 'Trying Multiple Links' )
  for OOo0oOOOO0 in mu_playlist :
   if 79 - 79: iiIi1IiI . I1 / oOO
   if 20 - 20: I1II * Ii
   if '$$lsname=' in OOo0oOOOO0 :
    Iii = OOo0oOOOO0 . split ( '$$lsname=' ) [ 1 ] . split ( '&regexs' ) [ 0 ]
    oOOOooo . append ( Iii )
    mu_playlist [ IIIII ] = OOo0oOOOO0 . split ( '$$lsname=' ) [ 0 ] + ( '&regexs' + OOo0oOOOO0 . split ( '&regexs' ) [ 1 ] if '&regexs' in OOo0oOOOO0 else '' )
   else :
    Iii = urlparse . urlparse ( OOo0oOOOO0 ) . netloc
    if Iii == '' :
     oOOOooo . append ( name )
    else :
     oOOOooo . append ( Iii )
   II11Ii = IIIII
   IIIII += 1
   if 79 - 79: Ii . i11IiI1II / oOO % iiIIi1i1Iii % OOO
   oo00oOo0 = oOOOooo [ II11Ii ]
   if OoO00oo0oo . iscanceled ( ) : return
   OoO00oo0oo . update ( IIIII / len ( mu_playlist ) * 100 , "" , "Link#%d" % ( IIIII ) , oo00oOo0 )
   print 'auto playnamexx' , oo00oOo0
   if "&mode=19" in mu_playlist [ II11Ii ] :
    if 28 - 28: O000000O * iIII1 + I1III1iI1iiiIiI1
    oo00 = xbmcgui . ListItem ( oo00oOo0 , iconImage = II1iI , thumbnailImage = II1iI )
    oo00 . setInfo ( type = 'Video' , infoLabels = { 'Title' : oo00oOo0 } )
    oo00 . setProperty ( "IsPlayable" , "true" )
    Oo0 = I1I ( mu_playlist [ II11Ii ] . replace ( '&mode=19' , '' ) . replace ( ';' , '' ) )
    oo00 . setPath ( Oo0 )
    if 71 - 71: iIII1 - oO0o0 + iiIi1IiI + I1III1iI1iiiIiI1 % oO0o0 - IIoooO0ooO0oo
    i1iiI1i = o0OoO0 ( Oo0 , oo00 )
   elif "$doregex" in mu_playlist [ II11Ii ] :
    if 67 - 67: IIoooO0ooO0oo . oO0o0 + oO00ooo0o0OO / iIII1
    o00oOO = mu_playlist [ II11Ii ] . split ( '&regexs=' )
    if 88 - 88: I1 / I1III1iI1iiiIiI1
    ooOoOO00OOoo0 , i111Ii1ii11 = ooooo0 ( o00oOO [ 1 ] , o00oOO [ 0 ] )
    OOO0OO0o000O0 = ooOoOO00OOoo0 . replace ( ';' , '' )
    oo00 = xbmcgui . ListItem ( oo00oOo0 , iconImage = II1iI , thumbnailImage = II1iI )
    oo00 . setInfo ( type = 'Video' , infoLabels = { 'Title' : oo00oOo0 } )
    oo00 . setProperty ( "IsPlayable" , "true" )
    oo00 . setPath ( OOO0OO0o000O0 )
    if 69 - 69: O000000O
    i1iiI1i = o0OoO0 ( OOO0OO0o000O0 , oo00 )
    if 30 - 30: iiIIi1i1Iii - IIoooO0ooO0oo . IiiIIiII
   else :
    ooOoOO00OOoo0 = mu_playlist [ II11Ii ]
    ooOoOO00OOoo0 = ooOoOO00OOoo0 . split ( '&regexs=' ) [ 0 ]
    oo00 = xbmcgui . ListItem ( oo00oOo0 , iconImage = II1iI , thumbnailImage = II1iI )
    oo00 . setInfo ( type = 'Video' , infoLabels = { 'Title' : oo00oOo0 } )
    oo00 . setProperty ( "IsPlayable" , "true" )
    oo00 . setPath ( ooOoOO00OOoo0 )
    if 69 - 69: iiI . O00O . oOO
    i1iiI1i = o0OoO0 ( ooOoOO00OOoo0 , oo00 )
    print 'played' , i1iiI1i
   print 'played' , i1iiI1i
   if i1iiI1i : return
  return
 if Ooo . getSetting ( 'ask_playlist_items' ) == 'true' and not queueVideo :
  import urlparse
  oOOOooo = [ ]
  IIIII = 0
  for OOo0oOOOO0 in mu_playlist :
   if '$$lsname=' in OOo0oOOOO0 :
    Iii = OOo0oOOOO0 . split ( '$$lsname=' ) [ 1 ] . split ( '&regexs' ) [ 0 ]
    oOOOooo . append ( Iii )
    mu_playlist [ IIIII ] = OOo0oOOOO0 . split ( '$$lsname=' ) [ 0 ] + ( '&regexs' + OOo0oOOOO0 . split ( '&regexs' ) [ 1 ] if '&regexs' in OOo0oOOOO0 else '' )
   else :
    Iii = urlparse . urlparse ( OOo0oOOOO0 ) . netloc
    if Iii == '' :
     oOOOooo . append ( name )
    else :
     oOOOooo . append ( Iii )
     if 25 - 25: iiI % IIII * oO00ooo0o0OO + IiiIIiII
   IIIII += 1
  II1IIiI = xbmcgui . Dialog ( )
  II11Ii = II1IIiI . select ( 'Choose a video source' , oOOOooo )
  if II11Ii >= 0 :
   oo00oOo0 = oOOOooo [ II11Ii ]
   print 'playnamexx' , oo00oOo0
   if "&mode=19" in mu_playlist [ II11Ii ] :
    if 81 - 81: O00O * oO0o0 . oO00ooo0o0OO
    oo00 = xbmcgui . ListItem ( oo00oOo0 , iconImage = II1iI , thumbnailImage = II1iI )
    oo00 . setInfo ( type = 'Video' , infoLabels = { 'Title' : oo00oOo0 } )
    oo00 . setProperty ( "IsPlayable" , "true" )
    Oo0 = I1I ( mu_playlist [ II11Ii ] . replace ( '&mode=19' , '' ) . replace ( ';' , '' ) )
    oo00 . setPath ( Oo0 )
    xbmc . Player ( ) . play ( Oo0 , oo00 )
   elif "$doregex" in mu_playlist [ II11Ii ] :
    if 77 - 77: i11IiI1II
    o00oOO = mu_playlist [ II11Ii ] . split ( '&regexs=' )
    if 79 - 79: IiiIIiII + oOO
    ooOoOO00OOoo0 , i111Ii1ii11 = ooooo0 ( o00oOO [ 1 ] , o00oOO [ 0 ] )
    OOO0OO0o000O0 = ooOoOO00OOoo0 . replace ( ';' , '' )
    oo00 = xbmcgui . ListItem ( oo00oOo0 , iconImage = II1iI , thumbnailImage = II1iI )
    oo00 . setInfo ( type = 'Video' , infoLabels = { 'Title' : oo00oOo0 } )
    oo00 . setProperty ( "IsPlayable" , "true" )
    oo00 . setPath ( OOO0OO0o000O0 )
    xbmc . Player ( ) . play ( OOO0OO0o000O0 , oo00 )
    if 52 - 52: IIII . Ii / oO00ooo0o0OO % oO0o0
   else :
    ooOoOO00OOoo0 = mu_playlist [ II11Ii ]
    ooOoOO00OOoo0 = ooOoOO00OOoo0 . split ( '&regexs=' ) [ 0 ]
    oo00 = xbmcgui . ListItem ( oo00oOo0 , iconImage = II1iI , thumbnailImage = II1iI )
    oo00 . setInfo ( type = 'Video' , infoLabels = { 'Title' : oo00oOo0 } )
    oo00 . setProperty ( "IsPlayable" , "true" )
    oo00 . setPath ( ooOoOO00OOoo0 )
    xbmc . Player ( ) . play ( ooOoOO00OOoo0 , oo00 )
 elif not queueVideo :
  if 11 - 11: OOO
  OoO000 . clear ( )
  OO = 0
  for OOo0oOOOO0 in mu_playlist :
   OO += 1
   I1iooo = xbmcgui . ListItem ( '%s) %s' % ( str ( OO ) , name ) )
   if 92 - 92: iiI % oO00ooo0o0OO % oO0o0 / IIII
   try :
    if "$doregex" in OOo0oOOOO0 :
     o00oOO = OOo0oOOOO0 . split ( '&regexs=' )
     if 47 - 47: I1 * IiiIIiII / iiIIi1i1Iii . I1III1iI1iiiIiI1
     ooOoOO00OOoo0 , i111Ii1ii11 = ooooo0 ( o00oOO [ 1 ] , o00oOO [ 0 ] )
    elif "&mode=19" in OOo0oOOOO0 :
     ooOoOO00OOoo0 = I1I ( OOo0oOOOO0 . replace ( '&mode=19' , '' ) . replace ( ';' , '' ) )
    if ooOoOO00OOoo0 :
     OoO000 . add ( ooOoOO00OOoo0 , I1iooo )
    else :
     raise
   except Exception :
    OoO000 . add ( OOo0oOOOO0 , I1iooo )
    pass
    if 80 - 80: IIII
  xbmc . executebuiltin ( 'playlist.playoffset(video,0)' )
 else :
  if 61 - 61: iiI - i11IiI1II % OOO . iIII1
  I1iIi1111i1I = xbmcgui . ListItem ( name )
  OoO000 . add ( mu_playlist , I1iIi1111i1I )
  if 45 - 45: oO00ooo0o0OO % I1
  if 29 - 29: IIoooO0ooO0oo % O000000O / I1II
def OO0ooO0o0o0 ( name , url ) :
 if Ooo . getSetting ( 'save_location' ) == "" :
  xbmc . executebuiltin ( "XBMC.Notification('Catoal','Choose a location to save files.',15000," + O00O000 + ")" )
  Ooo . openSettings ( )
 Oo = { 'url' : url , 'download_path' : Ooo . getSetting ( 'save_location' ) }
 downloader . download ( name , Oo )
 II1IIiI = xbmcgui . Dialog ( )
 iI11 = II1IIiI . yesno ( 'Catoal' , 'Do you want to add this file as a source?' )
 if iI11 :
  iiII1 ( os . path . join ( Ooo . getSetting ( 'save_location' ) , name ) )
  if 19 - 19: I1III1iI1iiiIiI1 - I1III1iI1iiiIiI1 % II - i11IiI1II
def Oo0oo00OO ( url , name ) :
 if 49 - 49: IIoooO0ooO0oo
 OOIiIii1Ii1ii = [ 'plugin://plugin.video.genesis/?action=shows_search' , 'plugin://plugin.video.genesis/?action=movies_search' , 'plugin://plugin.video.salts/?mode=search&amp;section=Movies' , 'plugin://plugin.video.salts/?mode=search&amp;section=TV' , 'plugin://plugin.video.muchmovies.hd/?action=movies_search' , 'plugin://plugin.video.viooz.co/?action=root_search' , 'plugin://plugin.video.ororotv/?action=shows_search' , 'plugin://plugin.video.yifymovies.hd/?action=movies_search' , 'plugin://plugin.video.cartoonhdtwo/?description&amp;fanart&amp;iconimage&amp;mode=3&amp;name=Search&amp;url=url' , 'plugin://plugin.video.youtube/kodion/search/list/' , 'plugin://plugin.video.dailymotion_com/?mode=search&amp;url' , 'plugin://plugin.video.vimeo/kodion/search/list/' ]
 if 83 - 83: i11Ii - oO00ooo0o0OO % OOO % I1II % I1II . II
 if 90 - 90: iiI . IIoooO0ooO0oo + iiI * IIoooO0ooO0oo % iIII1
 if 47 - 47: i11Ii
 if 12 - 12: IIoooO0ooO0oo % i11Ii
 if 84 - 84: iiIIi1i1Iii
 if 54 - 54: IiiIIiII
 if 46 - 46: i11Ii
 if 26 - 26: i11Ii
 if 50 - 50: I1 - iIII1 * iiI + IIoooO0ooO0oo
 if 91 - 91: IIII - I1III1iI1iiiIiI1 + OOO + I1II
 if 51 - 51: Ii . Ii - iIII1 - O000000O - IIoooO0ooO0oo . i11Ii
 if 40 - 40: iiI . iiIi1IiI % iiIi1IiI
 oOOOooo = [ 'Gensis TV' , 'Genesis Movie' , 'Salt movie' , 'salt TV' , 'Muchmovies' , 'viooz' , 'ORoroTV' , 'Yifymovies' , 'cartoonHD' , 'Youtube' , 'DailyMotion' , 'Vimeo' ]
 if 34 - 34: IIII
 II1IIiI = xbmcgui . Dialog ( )
 II11Ii = II1IIiI . select ( 'Choose a video source' , oOOOooo )
 if 10 - 10: I1II - I1 % OOO % II - i11IiI1II . I1
 if II11Ii >= 0 :
  url = OOIiIii1Ii1ii [ II11Ii ]
  if 21 - 21: IIoooO0ooO0oo % i11Ii + Ii + IIoooO0ooO0oo
  OO0o000 ( url )
  if 13 - 13: IIoooO0ooO0oo - IiiIIiII % iIII1 . oOO - O000000O
def oo0OOO0O ( name , url , mode , iconimage , fanart , description , genre , date , credits , showcontext = False , regexs = None , reg_url = None , allinfo = { } ) :
 if 23 - 23: I1III1iI1iiiIiI1
 if 12 - 12: iiIi1IiI % iiI
 if 85 - 85: II * O00O
 if regexs and len ( regexs ) > 0 :
  oOoO = sys . argv [ 0 ] + "?url=" + urllib . quote_plus ( url ) + "&mode=" + str ( mode ) + "&name=" + urllib . quote_plus ( O000ooo00oOoO ( name ) ) + "&fanart=" + urllib . quote_plus ( fanart ) + "&regexs=" + regexs
 else :
  oOoO = sys . argv [ 0 ] + "?url=" + urllib . quote_plus ( url ) + "&mode=" + str ( mode ) + "&name=" + urllib . quote_plus ( O000ooo00oOoO ( name ) ) + "&fanart=" + urllib . quote_plus ( fanart )
  if 38 - 38: OOO - iiI / I1III1iI1iiiIiI1
 OO0o0OOooOO0 = True
 if date == '' :
  date = None
 else :
  description += '\n\nDate: %s' % date
 oo00 = xbmcgui . ListItem ( name , iconImage = "DefaultFolder.png" , thumbnailImage = iconimage )
 if len ( allinfo ) < 1 :
  oo00 . setInfo ( type = "Video" , infoLabels = { "Title" : name , "Plot" : description , "Genre" : genre , "dateadded" : date , "credits" : credits } )
 else :
  oo00 . setInfo ( type = "Video" , infoLabels = allinfo )
 oo00 . setProperty ( "Fanart_Image" , fanart )
 if showcontext :
  o0OOo0OO0 = [ ]
  oooo00OOo0O0 = Ooo . getSetting ( 'parentalblocked' )
  oooo00OOo0O0 = oooo00OOo0O0 == "true"
  o000oooO0o0 = Ooo . getSetting ( 'parentalblockedpin' )
  if 59 - 59: IIII
  if len ( o000oooO0o0 ) > 0 :
   if oooo00OOo0O0 :
    o0OOo0OO0 . append ( ( 'Disable Parental Block' , 'XBMC.RunPlugin(%s?mode=55&name=%s)' % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) ) )
   else :
    o0OOo0OO0 . append ( ( 'Enable Parental Block' , 'XBMC.RunPlugin(%s?mode=56&name=%s)' % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) ) )
    if 81 - 81: oO00ooo0o0OO
  if showcontext == 'source' :
   if 23 - 23: IIoooO0ooO0oo % II
   if name in str ( iI1iII1i1iI ) :
    o0OOo0OO0 . append ( ( 'Remove from Sources' , 'XBMC.RunPlugin(%s?mode=8&name=%s)' % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) ) )
    if 3 - 3: O00O + Ii - I1III1iI1iiiIiI1 - I1II
    if 16 - 16: oO0o0
  elif showcontext == 'download' :
   o0OOo0OO0 . append ( ( 'Download' , 'XBMC.RunPlugin(%s?url=%s&mode=9&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
  elif showcontext == 'fav' :
   o0OOo0OO0 . append ( ( 'Remove from Catoal Favorites' , 'XBMC.RunPlugin(%s?mode=6&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) ) )
  if showcontext == '!!update' :
   IiiII = (
 '%s?url=%s&mode=17&regexs=%s'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( reg_url ) , regexs )
 )
   o0OOo0OO0 . append ( ( '[COLOR yellow]!!update[/COLOR]' , 'XBMC.RunPlugin(%s)' % IiiII ) )
  if not name in iI1Ii1 :
   o0OOo0OO0 . append ( ( 'Add to Catoal Favorites' , 'XBMC.RunPlugin(%s?mode=5&name=%s&url=%s&iconimage=%s&fanart=%s&fav_mode=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) , urllib . quote_plus ( url ) , urllib . quote_plus ( iconimage ) , urllib . quote_plus ( fanart ) , mode ) ) )
  oo00 . addContextMenuItems ( o0OOo0OO0 )
 OO0o0OOooOO0 = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = oOoO , listitem = oo00 , isFolder = True )
 return OO0o0OOooOO0
def iIII1i11 ( url , title , media_type = 'video' ) :
 if 65 - 65: II
 if 67 - 67: II + oO0o0 * Ii % OOO - Ii * IIoooO0ooO0oo
 import youtubedl
 if not url == '' :
  if media_type == 'audio' :
   youtubedl . single_YD ( url , download = True , audio = True )
  else :
   youtubedl . single_YD ( url , download = True )
 elif xbmc . Player ( ) . isPlaying ( ) == True :
  import YDStreamExtractor
  if YDStreamExtractor . isDownloading ( ) == True :
   if 75 - 75: Ii * IiiIIiII * i11IiI1II + iiI
   YDStreamExtractor . manageDownloads ( )
  else :
   o0O000O0oOO = xbmc . Player ( ) . getPlayingFile ( )
   if 22 - 22: I1III1iI1iiiIiI1 - O00O + Ii + iiI + I1II
   o0O000O0oOO = o0O000O0oOO . split ( '|User-Agent=' ) [ 0 ]
   I1iooo = { 'url' : o0O000O0oOO , 'title' : title , 'media_type' : media_type }
   youtubedl . single_YD ( '' , download = True , dl_info = I1iooo )
 else :
  xbmc . executebuiltin ( "XBMC.Notification(DOWNLOAD,First Play [COLOR yellow]WHILE playing download[/COLOR] ,10000)" )
  if 19 - 19: iiI / IIoooO0ooO0oo % iiIIi1i1Iii . IIoooO0ooO0oo
  if 54 - 54: i11Ii % I1III1iI1iiiIiI1
def iiIiii ( string ) :
 if isinstance ( string , basestring ) :
  if isinstance ( string , unicode ) :
   string = string . encode ( 'ascii' , 'ignore' )
 return string
def I11i11iii111i ( string , encoding = 'utf-8' ) :
 if isinstance ( string , basestring ) :
  if not isinstance ( string , unicode ) :
   string = unicode ( string , encoding , 'ignore' )
 return string
 if 83 - 83: I1III1iI1iiiIiI1 * OOO . I1III1iI1iiiIiI1
def O000ooo00oOoO ( string , encoding = 'utf-8' ) :
 if isinstance ( string , basestring ) :
  if isinstance ( string , unicode ) :
   string = string . encode ( 'utf-8' )
 return string
 if 18 - 18: iiIIi1i1Iii / Ii / O00O
def oo0O00000 ( s ) : return "" . join ( filter ( lambda o0oOoo0O : ord ( o0oOoo0O ) < 128 , s ) )
if 96 - 96: I1III1iI1iiiIiI1 * I1 * i11IiI1II % iiIi1IiI % O00O + IIII
def o0oooo0oo0o ( command ) :
 o0OoO0o = ''
 try :
  o0OoO0o = xbmc . executeJSONRPC ( I11i11iii111i ( command ) )
 except UnicodeEncodeError :
  o0OoO0o = xbmc . executeJSONRPC ( iiIiii ( command ) )
  if 98 - 98: iiIIi1i1Iii % I1III1iI1iiiIiI1 - oO00ooo0o0OO
 return I11i11iii111i ( o0OoO0o )
 if 57 - 57: i11Ii + iIII1
def OO0o000 ( url , give_me_result = None , playlist = False ) :
 if 'audio' in url :
  oo000OoOoo = I11i11iii111i ( '{"jsonrpc":"2.0","method":"Files.GetDirectory","params": {"directory":"%s","media":"video", "properties": ["title", "album", "artist", "duration","thumbnail", "year"]}, "id": 1}' ) % url
 else :
  oo000OoOoo = I11i11iii111i ( '{"jsonrpc":"2.0","method":"Files.GetDirectory","params":{"directory":"%s","media":"video","properties":[ "plot","playcount","director", "genre","votes","duration","trailer","premiered","thumbnail","title","year","dateadded","fanart","rating","season","episode","studio","mpaa"]},"id":1}' ) % url
 I1III1I11 = json . loads ( o0oooo0oo0o ( oo000OoOoo ) )
 if 66 - 66: Ii / i11IiI1II / iIII1
 if give_me_result :
  return I1III1I11
 if I1III1I11 . has_key ( 'error' ) :
  return
 else :
  if 'files' in I1III1I11 [ 'result' ] :
   for OOo0oOOOO0 in I1III1I11 [ 'result' ] [ 'files' ] :
    o0O0ooo = { }
    url = OOo0oOOOO0 [ 'file' ]
    if 83 - 83: IIoooO0ooO0oo % oOO . oOO . II % oOO
    IIiiII111i = OOo0oOOOO0 [ 'label' ]
    O0o = oo0O00000 ( OOo0oOOOO0 [ 'thumbnail' ] )
    ooo0ooOoO0Oo = oo0O00000 ( OOo0oOOOO0 [ 'fanart' ] )
    o0O0ooo = dict ( ( k , v ) for k , v in OOo0oOOOO0 . iteritems ( ) if not v == '0' or not v == - 1 or v == '' )
    o0O0ooo . pop ( "file" , None )
    if OOo0oOOOO0 [ 'filetype' ] == 'file' :
     if playlist :
      Oo0O00O0 ( IIiiII111i , url , queueVideo = '1' )
      continue
     else :
      ii ( url , IIiiII111i , O0o , ooo0ooOoO0Oo , '' , '' , '' , '' , None , '' , total = len ( I1III1I11 [ 'result' ] [ 'files' ] ) , allinfo = o0O0ooo )
      if 76 - 76: O000000O * IIoooO0ooO0oo
      if OOo0oOOOO0 [ 'type' ] and OOo0oOOOO0 [ 'type' ] == 'tvshow' :
       xbmcplugin . setContent ( int ( sys . argv [ 1 ] ) , 'tvshows' )
      elif 'episode' in OOo0oOOOO0 and OOo0oOOOO0 [ 'episode' ] > 0 :
       xbmcplugin . setContent ( int ( sys . argv [ 1 ] ) , 'episodes' )
       if 80 - 80: oO0o0 . O000000O * iiIi1IiI - i11IiI1II / iiI / I1II
    else :
     oo0OOO0O ( IIiiII111i , url , 53 , O0o , ooo0ooOoO0Oo , '' , '' , '' , '' , allinfo = o0O0ooo )
   xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
  else :
   return
   if 95 - 95: O000000O - oOO + I1 * Ii - iIII1 . I1II
def ii ( url , name , iconimage , fanart , description , genre , date , showcontext , playlist , regexs , total , setCookie = "" , allinfo = { } ) :
 if 4 - 4: OOO * II * O00O / O00O . IiiIIiII
 o0OOo0OO0 = [ ]
 oooo00OOo0O0 = Ooo . getSetting ( 'parentalblocked' )
 oooo00OOo0O0 = oooo00OOo0O0 == "true"
 o000oooO0o0 = Ooo . getSetting ( 'parentalblockedpin' )
 if 59 - 59: O000000O / iIII1 * OOO * iIII1 - I1III1iI1iiiIiI1 % oO00ooo0o0OO
 if len ( o000oooO0o0 ) > 0 :
  if oooo00OOo0O0 :
   o0OOo0OO0 . append ( ( 'Disable Parental Block' , 'XBMC.RunPlugin(%s?mode=55&name=%s)' % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) ) )
  else :
   o0OOo0OO0 . append ( ( 'Enable Parental Block' , 'XBMC.RunPlugin(%s?mode=56&name=%s)' % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) ) )
   if 87 - 87: IIoooO0ooO0oo + iIII1 . O000000O + I1
 try :
  name = name . encode ( 'utf-8' )
 except : pass
 OO0o0OOooOO0 = True
 Iiiii = False
 if regexs :
  O0OoOoo0 = '17'
  if 'listrepeat' in regexs :
   Iiiii = True
   if 65 - 65: I1III1iI1iiiIiI1 * II . O00O
  o0OOo0OO0 . append ( ( '[COLOR white]!!Download Currently Playing!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=21&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
 elif ( any ( x in url for x in OO00oo0o0O0oo ) and url . startswith ( 'http' ) ) or url . endswith ( '&mode=19' ) :
  url = url . replace ( '&mode=19' , '' )
  O0OoOoo0 = '19'
  o0OOo0OO0 . append ( ( '[COLOR white]!!Download Currently Playing!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=21&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
 elif url . endswith ( '&mode=18' ) :
  url = url . replace ( '&mode=18' , '' )
  O0OoOoo0 = '18'
  o0OOo0OO0 . append ( ( '[COLOR white]!!Download!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=23&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
  if Ooo . getSetting ( 'dlaudioonly' ) == 'true' :
   o0OOo0OO0 . append ( ( '!!Download [COLOR seablue]Audio!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=24&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
 elif url . startswith ( 'magnet:?xt=' ) :
  if '&' in url and not '&amp;' in url :
   url = url . replace ( '&' , '&amp;' )
  url = 'plugin://plugin.video.pulsar/play?uri=' + url
  O0OoOoo0 = '12'
 else :
  O0OoOoo0 = '12'
  o0OOo0OO0 . append ( ( '[COLOR white]!!Download Currently Playing!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=21&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( url ) , urllib . quote_plus ( name ) ) ) )
 if 'plugin://plugin.video.youtube/play/?video_id=' in url :
  I1IiiI1I11 = url . replace ( 'plugin://plugin.video.youtube/play/?video_id=' , 'https://www.youtube.com/watch?v=' )
  o0OOo0OO0 . append ( ( '!!Download [COLOR blue]Audio!![/COLOR]' , 'XBMC.RunPlugin(%s?url=%s&mode=24&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( I1IiiI1I11 ) , urllib . quote_plus ( name ) ) ) )
 oOoO = sys . argv [ 0 ] + "?"
 I111i1 = False
 if playlist :
  if Ooo . getSetting ( 'add_playlist' ) == "false" and '$$LSPlayOnlyOne$$' not in playlist [ 0 ] :
   oOoO += "url=" + urllib . quote_plus ( url ) + "&mode=" + O0OoOoo0
  else :
   oOoO += "mode=13&name=%s&playlist=%s" % ( urllib . quote_plus ( name ) , urllib . quote_plus ( str ( playlist ) . replace ( ',' , '||' ) ) )
   name = name + '[COLOR magenta] (' + str ( len ( playlist ) ) + ' items )[/COLOR]'
   I111i1 = True
 else :
  oOoO += "url=" + urllib . quote_plus ( url ) + "&mode=" + O0OoOoo0
 if regexs :
  oOoO += "&regexs=" + regexs
 if not setCookie == '' :
  oOoO += "&setCookie=" + urllib . quote_plus ( setCookie )
 if iconimage and not iconimage == '' :
  oOoO += "&iconimage=" + urllib . quote_plus ( iconimage )
  if 37 - 37: O000000O + iIII1 / oO0o0 + iIII1 - iIII1
 if date == '' :
  date = None
 else :
  description += '\n\nDate: %s' % date
 oo00 = xbmcgui . ListItem ( name , iconImage = "DefaultVideo.png" , thumbnailImage = iconimage )
 if 58 - 58: i11IiI1II
 if allinfo == None or len ( allinfo ) < 1 :
  oo00 . setInfo ( type = "Video" , infoLabels = { "Title" : name , "Plot" : description , "Genre" : genre , "dateadded" : date } )
 else :
  oo00 . setInfo ( type = "Video" , infoLabels = allinfo )
 oo00 . setProperty ( "Fanart_Image" , fanart )
 if 84 - 84: iiIi1IiI + i11IiI1II + oO0o0 % iiIIi1i1Iii
 if ( not I111i1 ) and not any ( x in url for x in OOo0O ) and not '$PLAYERPROXY$=' in url :
  if regexs :
   if 85 - 85: oO00ooo0o0OO - iiIi1IiI
   if '$pyFunction:playmedia(' not in urllib . unquote_plus ( regexs ) and 'notplayable' not in urllib . unquote_plus ( regexs ) and 'listrepeat' not in urllib . unquote_plus ( regexs ) :
    if 93 - 93: IIII * oO00ooo0o0OO - O000000O
    oo00 . setProperty ( 'IsPlayable' , 'true' )
  else :
   oo00 . setProperty ( 'IsPlayable' , 'true' )
 else :
  i1IiiII ( 'NOT setting isplayable' + url )
 if showcontext :
  if 33 - 33: IIII + O00O / iiIi1IiI % iiIi1IiI % II % O000000O
  if showcontext == 'fav' :
   o0OOo0OO0 . append (
 ( 'Remove from Catoal Favorites' , 'XBMC.RunPlugin(%s?mode=6&name=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) ) )
 )
  elif not name in iI1Ii1 :
   try :
    O0oooOo0 = (
 '%s?mode=5&name=%s&url=%s&iconimage=%s&fanart=%s&fav_mode=0'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) , urllib . quote_plus ( url ) , urllib . quote_plus ( iconimage ) , urllib . quote_plus ( fanart ) )
 )
   except :
    O0oooOo0 = (
 '%s?mode=5&name=%s&url=%s&iconimage=%s&fanart=%s&fav_mode=0'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( name ) , urllib . quote_plus ( url ) , urllib . quote_plus ( iconimage . encode ( "utf-8" ) ) , urllib . quote_plus ( fanart . encode ( "utf-8" ) ) )
 )
   if playlist :
    O0oooOo0 += 'playlist=' + urllib . quote_plus ( str ( playlist ) . replace ( ',' , '||' ) )
   if regexs :
    O0oooOo0 += "&regexs=" + regexs
   o0OOo0OO0 . append ( ( 'Add to Catoal Favorites' , 'XBMC.RunPlugin(%s)' % O0oooOo0 ) )
  oo00 . addContextMenuItems ( o0OOo0OO0 )
 try :
  if not playlist is None :
   if Ooo . getSetting ( 'add_playlist' ) == "false" :
    i11O0OO0 = name . split ( ') ' ) [ 1 ]
    OoOo00o0oOoO = [
 ( 'Play ' + i11O0OO0 + ' PlayList' , 'XBMC.RunPlugin(%s?mode=13&name=%s&playlist=%s)'
 % ( sys . argv [ 0 ] , urllib . quote_plus ( i11O0OO0 ) , urllib . quote_plus ( str ( playlist ) . replace ( ',' , '||' ) ) ) )
 ]
    oo00 . addContextMenuItems ( OoOo00o0oOoO )
 except : pass
 if 44 - 44: i11IiI1II . IIoooO0ooO0oo + O00O + I1II
 OO0o0OOooOO0 = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = oOoO , listitem = oo00 , totalItems = total , isFolder = Iiiii )
 if 100 - 100: IiiIIiII * IiiIIiII % oOO
 if 49 - 49: IIII + O00O * I1II
 return OO0o0OOooOO0
 if 4 - 4: Ii * iiIIi1i1Iii . oO0o0 . I1II % O00O / iIII1
 if 6 - 6: IiiIIiII
def I11I1iI ( url , name , iconimage , setresolved = True , reg = None ) :
 print 'playsetresolved' , url , setresolved
 if url == None :
  xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
  return
 if setresolved :
  i11ii1 = True
  if '$$LSDirect$$' in url :
   url = url . replace ( '$$LSDirect$$' , '' )
   i11ii1 = False
  if reg and 'notplayable' in reg :
   i11ii1 = False
   if 89 - 89: iiIIi1i1Iii
  oo00 = xbmcgui . ListItem ( name , iconImage = iconimage , thumbnailImage = iconimage )
  oo00 . setInfo ( type = 'Video' , infoLabels = { 'Title' : name } )
  oo00 . setProperty ( "IsPlayable" , "true" )
  oo00 . setPath ( url )
  if not i11ii1 :
   xbmc . Player ( ) . play ( url )
  else :
   xbmcplugin . setResolvedUrl ( int ( sys . argv [ 1 ] ) , True , oo00 )
   if 35 - 35: IIoooO0ooO0oo + IIoooO0ooO0oo . IiiIIiII * oO00ooo0o0OO / I1II + iiIi1IiI
 else :
  xbmc . executebuiltin ( 'XBMC.RunPlugin(' + url + ')' )
  if 76 - 76: i11Ii % i11Ii . Ii
  if 58 - 58: I1 / oO00ooo0o0OO
  if 35 - 35: iiIIi1i1Iii * i11IiI1II + iIII1 % I1III1iI1iiiIiI1
  if 25 - 25: I1III1iI1iiiIiI1 + I1 % oO00ooo0o0OO
def OOo ( link ) :
 ooOoOO00OOoo0 = urllib . urlopen ( link )
 OO0o0OoO00 = ooOoOO00OOoo0 . read ( )
 ooOoOO00OOoo0 . close ( )
 oOoi1II11ii = OO0o0OoO00 . split ( "Jetzt" )
 Ooi11I11i1II = oOoi1II11ii [ 1 ] . split ( 'programm/detail.php?const_id=' )
 iiIii1IiI = Ooi11I11i1II [ 1 ] . split ( '<br /><a href="/' )
 oOo0O0ooo0oO = iiIii1IiI [ 0 ] [ 40 : len ( iiIii1IiI [ 0 ] ) ]
 o00oO000Oo0o0 = Ooi11I11i1II [ 2 ] . split ( "</a></p></div>" )
 oo0oOoOo0 = o00oO000Oo0o0 [ 0 ] [ 17 : len ( o00oO000Oo0o0 [ 0 ] ) ]
 oo0oOoOo0 = oo0oOoOo0 . encode ( 'utf-8' )
 return "  - " + oo0oOoOo0 + " - " + oOo0O0ooo0oO
 if 84 - 84: O00O / Ii * oO0o0 % iiI - OOO
 if 54 - 54: IIoooO0ooO0oo
def oooo0o ( url , regex ) :
 o0OoO0o = Ii1Iii1I1i1i ( url )
 try :
  OO = re . findall ( regex , o0OoO0o ) [ 0 ]
  return OO
 except :
  i1IiiII ( 'regex failed' )
  i1IiiII ( regex )
  return
  if 46 - 46: II
  if 100 - 100: O00O / i11Ii
  if 74 - 74: i11IiI1II . O00O - iIII1 - II . O000000O
def iII1I1IIi11i ( d , root = "root" , nested = 0 ) :
 if 27 - 27: IIII
 oOO0o = lambda o0OO00oo00o : '<' + o0OO00oo00o + '>'
 Iioo00 = lambda o0OO00oo00o : '</' + o0OO00oo00o + '>\n'
 if 23 - 23: iiI
 oo00000O0000 = lambda ii1iI111iIi1 , ooIIiIII1i : ooIIiIII1i + oOO0o ( II1 ) + str ( ii1iI111iIi1 ) + Iioo00 ( II1 )
 ooIIiIII1i = oOO0o ( root ) + '\n' if root else ""
 if 67 - 67: II % oO0o0 + oOO + oO00ooo0o0OO / i11IiI1II
 for II1 , oO000O0oo0O0 in d . iteritems ( ) :
  o0o = type ( oO000O0oo0O0 )
  if nested == 0 : II1 = 'regex'
  if o0o is list :
   for ii1iI111iIi1 in oO000O0oo0O0 :
    ii1iI111iIi1 = escape ( ii1iI111iIi1 )
    ooIIiIII1i = oo00000O0000 ( ii1iI111iIi1 , ooIIiIII1i )
    if 55 - 55: IIoooO0ooO0oo + i11IiI1II + iiI - IiiIIiII
  if o0o is dict :
   ooIIiIII1i = oo00000O0000 ( '\n' + iII1I1IIi11i ( oO000O0oo0O0 , None , nested + 1 ) , ooIIiIII1i )
  if o0o is not list and o0o is not dict :
   if not oO000O0oo0O0 is None : oO000O0oo0O0 = escape ( oO000O0oo0O0 )
   if 35 - 35: Ii
   if oO000O0oo0O0 is None :
    ooIIiIII1i = oo00000O0000 ( oO000O0oo0O0 , ooIIiIII1i )
   else :
    if 38 - 38: iIII1 % O000000O
    ooIIiIII1i = oo00000O0000 ( oO000O0oo0O0 . encode ( "utf-8" ) , ooIIiIII1i )
    if 1 - 1: I1III1iI1iiiIiI1 . IIII
 ooIIiIII1i += Iioo00 ( root ) if root else ""
 if 51 - 51: Ii / I1 / IiiIIiII / I1III1iI1iiiIiI1 % I1III1iI1iiiIiI1 / IIoooO0ooO0oo
 return ooIIiIII1i
xbmcplugin . setContent ( int ( sys . argv [ 1 ] ) , 'movies' )
if 81 - 81: II . oOO % oOO
try :
 xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_UNSORTED )
except :
 pass
try :
 xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_LABEL )
except :
 pass
try :
 xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_DATE )
except :
 pass
try :
 xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_GENRE )
except :
 pass
 if 53 - 53: iiIIi1i1Iii - O00O * i11Ii / oO00ooo0o0OO . oOO * i11Ii
Oo = o0oO00OO0O0 ( )
if 62 - 62: oO0o0 - O000000O . oO0o0 / IiiIIiII / IIII
ooOoOO00OOoo0 = None
IIiiII111i = None
O0OoOoo0 = None
OoO000 = None
II1iI = None
ooo0ooOoO0Oo = O0OOO
OoO000 = None
I1IIIIi111ii1 = None
O0OoO0oo0 = None
if 34 - 34: IiiIIiII % IIII - iiIIi1i1Iii
try :
 ooOoOO00OOoo0 = urllib . unquote_plus ( Oo [ "url" ] ) . decode ( 'utf-8' )
except :
 pass
try :
 IIiiII111i = urllib . unquote_plus ( Oo [ "name" ] )
except :
 pass
try :
 II1iI = urllib . unquote_plus ( Oo [ "iconimage" ] )
except :
 pass
try :
 ooo0ooOoO0Oo = urllib . unquote_plus ( Oo [ "fanart" ] )
except :
 pass
try :
 O0OoOoo0 = int ( Oo [ "mode" ] )
except :
 pass
try :
 OoO000 = eval ( urllib . unquote_plus ( Oo [ "playlist" ] ) . replace ( '||' , ',' ) )
except :
 pass
try :
 I1IIIIi111ii1 = int ( Oo [ "fav_mode" ] )
except :
 pass
try :
 O0OoO0oo0 = Oo [ "regexs" ]
except :
 pass
OooooOo0 = ''
try :
 OooooOo0 = urllib . unquote_plus ( Oo [ "playitem" ] )
except :
 pass
 if 87 - 87: iiIi1IiI / IIII + Ii + I1II
i1IiiII ( "Mode: " + str ( O0OoOoo0 ) )
if 74 - 74: O00O / I1II * IIoooO0ooO0oo % iiIi1IiI - iiI
if 72 - 72: oOO % i11IiI1II * O00O
if not ooOoOO00OOoo0 is None :
 i1IiiII ( "URL: " + str ( ooOoOO00OOoo0 . encode ( 'utf-8' ) ) )
i1IiiII ( "Name: " + str ( IIiiII111i ) )
if 30 - 30: O000000O * iIII1
if not OooooOo0 == '' :
 Ii1II1IiI = IIiI11 ( '' , data = OooooOo0 )
 IIiiII111i , ooOoOO00OOoo0 , O0OoO0oo0 = i1iIiIiIi ( Ii1II1IiI , None , dontLink = True )
 O0OoOoo0 = 117
if O0OoOoo0 == None :
 i1IiiII ( "getSources" )
 i1iIii ( )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 70 - 70: I1III1iI1iiiIiI1 . i11Ii + iiI / O00O % iIII1 + O000000O
elif O0OoOoo0 == 1 :
 i1IiiII ( "getData" )
 o0OoO0o = None
 if 38 - 38: O00O
 if O0OoO0oo0 and len ( O0OoO0oo0 ) > 0 :
  o0OoO0o , i111Ii1ii11 = ooooo0 ( O0OoO0oo0 , ooOoOO00OOoo0 )
  if 84 - 84: oOO - OOO + i11IiI1II . iIII1
  if 33 - 33: Ii . IiiIIiII % iiIi1IiI * iiIi1IiI % iIII1 * IIII
  if o0OoO0o . startswith ( 'http' ) or o0OoO0o . startswith ( 'smb' ) or o0OoO0o . startswith ( 'nfs' ) or o0OoO0o . startswith ( '/' ) :
   ooOoOO00OOoo0 = o0OoO0o
   o0OoO0o = None
   if 27 - 27: IIoooO0ooO0oo % oOO % I1III1iI1iiiIiI1 + iiIi1IiI - I1III1iI1iiiIiI1 / oO0o0
   if 96 - 96: i11Ii + iiIi1IiI
 O0 ( ooOoOO00OOoo0 , ooo0ooOoO0Oo , o0OoO0o )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 36 - 36: O00O - oOO + O00O / iiIIi1i1Iii / iiI / II
 if 77 - 77: i11IiI1II . O00O % I1 + O000000O - Ii + iiI
elif O0OoOoo0 == 2 :
 i1IiiII ( "getChannelItems" )
 O0O00ooo00Ooo ( IIiiII111i , ooOoOO00OOoo0 , ooo0ooOoO0Oo )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 81 - 81: i11Ii + oO0o0 * oOO * Ii
elif O0OoOoo0 == 3 :
 i1IiiII ( "getSubChannelItems" )
 oo ( IIiiII111i , ooOoOO00OOoo0 , ooo0ooOoO0Oo )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 1 - 1: O000000O * iiI * iIII1
elif O0OoOoo0 == 4 :
 i1IiiII ( "getFavorites" )
 IiiII1i1iI ( )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 11 - 11: O00O / I1II / I1
elif O0OoOoo0 == 5 :
 i1IiiII ( "addFavorite" )
 try :
  IIiiII111i = IIiiII111i . split ( '\\ ' ) [ 1 ]
 except :
  pass
 try :
  IIiiII111i = IIiiII111i . split ( '  - ' ) [ 0 ]
 except :
  pass
 i1i1I111IiI ( IIiiII111i , ooOoOO00OOoo0 , II1iI , ooo0ooOoO0Oo , I1IIIIi111ii1 )
 if 75 - 75: IIII + oO00ooo0o0OO + iIII1 * i11IiI1II - Ii
elif O0OoOoo0 == 6 :
 i1IiiII ( "rmFavorite" )
 try :
  IIiiII111i = IIiiII111i . split ( '\\ ' ) [ 1 ]
 except :
  pass
 try :
  IIiiII111i = IIiiII111i . split ( '  - ' ) [ 0 ]
 except :
  pass
 I1iiI1i11II ( IIiiII111i )
 if 60 - 60: oOO . iiIIi1i1Iii / iiI % IIoooO0ooO0oo
elif O0OoOoo0 == 7 :
 i1IiiII ( "addSource" )
 iiII1 ( ooOoOO00OOoo0 )
 if 76 - 76: Ii * oO0o0 * oO00ooo0o0OO % iIII1 * O000000O + O000000O
elif O0OoOoo0 == 8 :
 i1IiiII ( "rmSource" )
 iIi11 ( IIiiII111i )
 if 31 - 31: i11Ii
elif O0OoOoo0 == 9 :
 i1IiiII ( "download_file" )
 OO0ooO0o0o0 ( IIiiII111i , ooOoOO00OOoo0 )
 if 2 - 2: i11IiI1II / IIoooO0ooO0oo
elif O0OoOoo0 == 10 :
 i1IiiII ( "getCommunitySources" )
 Ii1Ii11i1 ( )
 if 57 - 57: O00O % O00O + oOO
elif O0OoOoo0 == 11 :
 i1IiiII ( "addSource" )
 iiII1 ( ooOoOO00OOoo0 )
 if 100 - 100: Ii + i11Ii
elif O0OoOoo0 == 12 :
 i1IiiII ( "setResolvedUrl" )
 if not ooOoOO00OOoo0 . startswith ( "plugin://plugin" ) or not any ( x in ooOoOO00OOoo0 for x in OOo0O ) :
  i11ii1 = True
  if '$$LSDirect$$' in ooOoOO00OOoo0 :
   ooOoOO00OOoo0 = ooOoOO00OOoo0 . replace ( '$$LSDirect$$' , '' )
   i11ii1 = False
  OO = xbmcgui . ListItem ( path = ooOoOO00OOoo0 )
  if not i11ii1 :
   xbmc . Player ( ) . play ( ooOoOO00OOoo0 )
  else :
   xbmcplugin . setResolvedUrl ( int ( sys . argv [ 1 ] ) , True , OO )
 else :
  if 98 - 98: OOO % i11Ii . IIII - iIII1 . iiIi1IiI
  xbmc . executebuiltin ( 'XBMC.RunPlugin(' + ooOoOO00OOoo0 + ')' )
  if 5 - 5: Ii / iIII1 / I1II
  if 10 - 10: oO0o0 / oO0o0 + II
elif O0OoOoo0 == 13 :
 i1IiiII ( "play_playlist" )
 Oo0O00O0 ( IIiiII111i , OoO000 )
 if 19 - 19: iiIIi1i1Iii
elif O0OoOoo0 == 14 :
 i1IiiII ( "get_xml_database" )
 i1I11111 ( ooOoOO00OOoo0 )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 8 - 8: I1
elif O0OoOoo0 == 15 :
 i1IiiII ( "browse_xml_database" )
 i1I11111 ( ooOoOO00OOoo0 , True )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 32 - 32: I1II - oO0o0 % IiiIIiII
elif O0OoOoo0 == 16 :
 i1IiiII ( "browse_community" )
 Ii1Ii11i1 ( ooOoOO00OOoo0 , browse = True )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 45 - 45: OOO * I1 % I1II
elif O0OoOoo0 == 17 or O0OoOoo0 == 117 :
 i1IiiII ( "getRegexParsed" )
 if 72 - 72: OOO
 o0OoO0o = None
 if O0OoO0oo0 and 'listrepeat' in urllib . unquote_plus ( O0OoO0oo0 ) :
  Oo0o00O0oo000 , iI11 , i1i , O0OoO0oo0 , iIii1 = ooooo0 ( O0OoO0oo0 , ooOoOO00OOoo0 )
  if 66 - 66: I1III1iI1iiiIiI1 + I1II
  i1i1I1ii1i = ''
  if 80 - 80: i11IiI1II + oOO * iiI - Ii
  if 35 - 35: iIII1 + OOO * IiiIIiII * oOO
  oOOoo = i1i [ 'name' ]
  IIo0oo0OoO00000 = O0OoO0oo0 . pop ( oOOoo )
  if 90 - 90: oO00ooo0o0OO . Ii
  ooOoOO00OOoo0 = ''
  import copy
  IIiIii = ''
  III1i1 = 0
  for o0oii1Iii in iI11 :
   if 9 - 9: i11IiI1II
   try :
    III1i1 += 1
    II111I1III1 = copy . deepcopy ( O0OoO0oo0 )
    if 54 - 54: I1 / OOO * iiI
    o0oo = Oo0o00O0oo000
    OOo0oOOOO0 = 0
    for OOo0oOOOO0 in range ( len ( o0oii1Iii ) ) :
     if 44 - 44: IiiIIiII + i11IiI1II - IIII * IIII / I1II
     if len ( II111I1III1 ) > 0 :
      for oO000oo00 , iI1Ii1IiII1 in II111I1III1 . iteritems ( ) :
       if iI1Ii1IiII1 is not None :
        for i1oooo0000O , O0oOOooO in iI1Ii1IiII1 . iteritems ( ) :
         if O0oOOooO is not None :
          if 87 - 87: i11IiI1II . iIII1 . iiI / iIII1 / IIII * O00O
          if 61 - 61: i11Ii - I1 + IIoooO0ooO0oo
          if 58 - 58: O00O . I1II + Ii % II + O00O
          if 61 - 61: OOO + IIoooO0ooO0oo * IiiIIiII / oO00ooo0o0OO . oO0o0
          if type ( O0oOOooO ) is dict :
           for i1iI1iiI11 , I1IIoo0o0ooo in O0oOOooO . iteritems ( ) :
            if I1IIoo0o0ooo is not None :
             O0oOoO0 = None
             if isinstance ( o0oii1Iii , tuple ) :
              try :
               O0oOoO0 = o0oii1Iii [ OOo0oOOOO0 ] . decode ( 'utf-8' )
              except :
               O0oOoO0 = o0oii1Iii [ OOo0oOOOO0 ]
             else :
              try :
               O0oOoO0 = o0oii1Iii . decode ( 'utf-8' )
              except :
               O0oOoO0 = o0oii1Iii
               if 17 - 17: I1II + I1 % I1 . O000000O * iiIi1IiI / II
             if '[' + oOOoo + '.param' + str ( OOo0oOOOO0 + 1 ) + '][DE]' in I1IIoo0o0ooo :
              I1IIoo0o0ooo = I1IIoo0o0ooo . replace ( '[' + oOOoo + '.param' + str ( OOo0oOOOO0 + 1 ) + '][DE]' , unescape ( O0oOoO0 ) )
             O0oOOooO [ i1iI1iiI11 ] = I1IIoo0o0ooo . replace ( '[' + oOOoo + '.param' + str ( OOo0oOOOO0 + 1 ) + ']' , O0oOoO0 )
             if 22 - 22: iIII1
             if 81 - 81: iiIIi1i1Iii % i11IiI1II * iiIIi1i1Iii . iiI + IiiIIiII * O000000O
          else :
           O0oOoO0 = None
           if isinstance ( o0oii1Iii , tuple ) :
            try :
             O0oOoO0 = o0oii1Iii [ OOo0oOOOO0 ] . decode ( 'utf-8' )
            except :
             O0oOoO0 = o0oii1Iii [ OOo0oOOOO0 ]
           else :
            try :
             O0oOoO0 = o0oii1Iii . decode ( 'utf-8' )
            except :
             O0oOoO0 = o0oii1Iii
           if '[' + oOOoo + '.param' + str ( OOo0oOOOO0 + 1 ) + '][DE]' in O0oOOooO :
            if 9 - 9: i11Ii
            O0oOOooO = O0oOOooO . replace ( '[' + oOOoo + '.param' + str ( OOo0oOOOO0 + 1 ) + '][DE]' , unescape ( O0oOoO0 ) )
            if 46 - 46: oO0o0 % IiiIIiII / I1 / OOO % oO0o0
           iI1Ii1IiII1 [ i1oooo0000O ] = O0oOOooO . replace ( '[' + oOOoo + '.param' + str ( OOo0oOOOO0 + 1 ) + ']' , O0oOoO0 )
           if 18 - 18: I1III1iI1iiiIiI1 % oO0o0 - II * I1 . IIoooO0ooO0oo
           if 47 - 47: I1II * II . oO00ooo0o0OO
     O0oOoO0 = None
     if isinstance ( o0oii1Iii , tuple ) :
      try :
       O0oOoO0 = o0oii1Iii [ OOo0oOOOO0 ] . decode ( 'utf-8' )
      except :
       O0oOoO0 = o0oii1Iii [ OOo0oOOOO0 ]
     else :
      try :
       O0oOoO0 = o0oii1Iii . decode ( 'utf-8' )
      except :
       O0oOoO0 = o0oii1Iii
     if '[' + oOOoo + '.param' + str ( OOo0oOOOO0 + 1 ) + '][DE]' in o0oo :
      o0oo = o0oo . replace ( '[' + oOOoo + '.param' + str ( OOo0oOOOO0 + 1 ) + '][DE]' , O0oOoO0 )
     o0oo = o0oo . replace ( '[' + oOOoo + '.param' + str ( OOo0oOOOO0 + 1 ) + ']' , escape ( O0oOoO0 ) )
     if 83 - 83: O000000O - II / iiIIi1i1Iii
    o0oo = o0oo . replace ( '[' + oOOoo + '.param' + str ( 0 ) + ']' , str ( III1i1 ) )
    if 34 - 34: iIII1 + oOO / O000000O + II % oO0o0
    try :
     if iIii1 and '[' + oOOoo + '.cookies]' in o0oo :
      o0oo = o0oo . replace ( '[' + oOOoo + '.cookies]' , oooOo0Ooo0 ( iIii1 ) )
    except : pass
    if 80 - 80: oO00ooo0o0OO - iiI
    if 11 - 11: OOO * IiiIIiII
    if 12 - 12: I1 - II - iIII1
    if 3 - 3: II . IIII % oO0o0
    O0O0ooOo00o = ''
    if 52 - 52: iiIi1IiI . IiiIIiII + oOO % IiiIIiII
    if len ( II111I1III1 ) > 0 :
     O0O0ooOo00o = iII1I1IIi11i ( II111I1III1 , 'lsproroot' )
     O0O0ooOo00o = O0O0ooOo00o . split ( '<lsproroot>' ) [ 1 ] . split ( '</lsproroot' ) [ 0 ]
     if 88 - 88: I1
     if 24 - 24: Ii - IiiIIiII
    try :
     IIiIii += '\n<item>%s\n%s</item>' % ( o0oo , O0O0ooOo00o )
    except : IIiIii += '\n<item>%s\n%s</item>' % ( o0oo . encode ( "utf-8" ) , O0O0ooOo00o )
   except : traceback . print_exc ( file = sys . stdout )
   if 48 - 48: O00O * IIoooO0ooO0oo / IiiIIiII - IiiIIiII . II . oO00ooo0o0OO
   if 81 - 81: oO0o0 % iiIIi1i1Iii
   if 30 - 30: I1II . oO0o0 + O000000O
   if 8 - 8: I1II - II
   if 52 - 52: IIII - oO0o0 + oOO . Ii
  i1IiiII ( repr ( IIiIii ) )
  O0 ( '' , '' , IIiIii )
  xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 else :
  ooOoOO00OOoo0 , i111Ii1ii11 = ooooo0 ( O0OoO0oo0 , ooOoOO00OOoo0 )
  print repr ( ooOoOO00OOoo0 ) , i111Ii1ii11 , 'imhere'
  if ooOoOO00OOoo0 :
   if '$PLAYERPROXY$=' in ooOoOO00OOoo0 :
    ooOoOO00OOoo0 , ooOoOoOo = ooOoOO00OOoo0 . split ( '$PLAYERPROXY$=' )
    print 'proxy' , ooOoOoOo
    if 60 - 60: iiIIi1i1Iii / OOO + oO00ooo0o0OO
    I1i1iiiIi1iiI = None
    Ii1i1i1iii = None
    if len ( ooOoOoOo ) > 0 and '@' in ooOoOoOo :
     ooOoOoOo = ooOoOoOo . split ( ':' )
     I1i1iiiIi1iiI = ooOoOoOo [ 0 ]
     Ii1i1i1iii = ooOoOoOo [ 1 ] . split ( '@' ) [ 0 ]
     IiiIiI1 = ooOoOoOo [ 1 ] . split ( '@' ) [ 1 ]
     Ii11Ii11II = ooOoOoOo [ 2 ]
    else :
     IiiIiI1 , Ii11Ii11II = ooOoOoOo . split ( ':' )
     if 34 - 34: i11IiI1II * IIII * IiiIIiII / IIoooO0ooO0oo / iiIIi1i1Iii
    ii11 ( ooOoOO00OOoo0 , IIiiII111i , II1iI , IiiIiI1 , Ii11Ii11II , I1i1iiiIi1iiI , Ii1i1i1iii )
   else :
    I11I1iI ( ooOoOO00OOoo0 , IIiiII111i , II1iI , i111Ii1ii11 , O0OoO0oo0 )
  else :
   xbmc . executebuiltin ( "XBMC.Notification(Catoal,Failed to extract regex. - " + "this" + ",4000," + O00O000 + ")" )
elif O0OoOoo0 == 18 :
 i1IiiII ( "youtubedl" )
 try :
  import youtubedl
 except Exception :
  xbmc . executebuiltin ( "XBMC.Notification(Catoal,Please [COLOR yellow]install Youtube-dl[/COLOR] module ,10000," ")" )
 i1II11I111 = youtubedl . single_YD ( ooOoOO00OOoo0 )
 I11I1iI ( i1II11I111 , IIiiII111i , II1iI )
elif O0OoOoo0 == 19 :
 i1IiiII ( "Genesiscommonresolvers" )
 I11I1iI ( I1I ( ooOoOO00OOoo0 ) , IIiiII111i , II1iI , True )
 if 29 - 29: I1II + oO0o0
elif O0OoOoo0 == 21 :
 i1IiiII ( "download current file using youtube-dl service" )
 iIII1i11 ( '' , IIiiII111i , 'video' )
elif O0OoOoo0 == 23 :
 i1IiiII ( "get info then download" )
 iIII1i11 ( ooOoOO00OOoo0 , IIiiII111i , 'video' )
elif O0OoOoo0 == 24 :
 i1IiiII ( "Audio only youtube download" )
 iIII1i11 ( ooOoOO00OOoo0 , IIiiII111i , 'audio' )
elif O0OoOoo0 == 25 :
 i1IiiII ( "Searchin Other plugins" )
 Oo0oo00OO ( ooOoOO00OOoo0 , IIiiII111i )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
elif O0OoOoo0 == 55 :
 i1IiiII ( "enabled lock" )
 o000oooO0o0 = Ooo . getSetting ( 'parentalblockedpin' )
 iiiIIIiI = xbmc . Keyboard ( '' , 'Enter Pin' )
 iiiIIIiI . doModal ( )
 if not ( iiiIIIiI . isConfirmed ( ) == False ) :
  IiiI11iii = iiiIIIiI . getText ( )
  if IiiI11iii == o000oooO0o0 :
   Ooo . setSetting ( 'parentalblocked' , "false" )
   xbmc . executebuiltin ( "XBMC.Notification(Catoal,Parental Block Disabled,5000," + O00O000 + ")" )
  else :
   xbmc . executebuiltin ( "XBMC.Notification(Catoal,Wrong Pin??,5000," + O00O000 + ")" )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
elif O0OoOoo0 == 56 :
 i1IiiII ( "disable lock" )
 Ooo . setSetting ( 'parentalblocked' , "true" )
 xbmc . executebuiltin ( "XBMC.Notification(Catoal,Parental block enabled,5000," + O00O000 + ")" )
 xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
 if 14 - 14: i11Ii / iIII1 / iiIIi1i1Iii * i11Ii / I1III1iI1iiiIiI1 - iiI
elif O0OoOoo0 == 53 :
 i1IiiII ( "Requesting JSON-RPC Items" )
 OO0o000 ( ooOoOO00OOoo0 )
 if 21 - 21: Ii * iiIIi1i1Iii + II + IiiIIiII / I1
if not OO00OoO == None :
 print 'setting view mode'
 xbmc . executebuiltin ( "Container.SetViewMode(%s)" % OO00OoO )
# 807cb1bfffb234dace3f930f571a9039d76f4cf9
')